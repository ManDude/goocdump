#gool CardC 57 5

#include "..\\goolstdlib.gooc"

#anim GEM_CLEAR [Gc10V] 1
#anim KEY [Gk10V] 1

#anim BACKGROUND [Obg0V] 1

#fraganim FLAVOR_SAVE_POINT [Fon0T] 4
#frag 0x808080 0 0 3 0 48 24 64 32 -200 0 200 200
#frag 0x808080 0 0 3 0 48 16 64 32 200 0 600 200
#frag 0x808080 0 0 3 0 48 8 64 32 600 0 1000 200
#frag 0x808080 0 0 3 0 76 8 16 32 1000 0 1100 200

#fraganim FLAVOR_GEM_SAVE [Fon0T] 3
#frag 0x808080 0 0 4 0 56 24 64 32 -200 0 200 200
#frag 0x808080 0 0 4 0 56 16 64 32 200 0 600 200
#frag 0x808080 0 0 4 0 56 8 64 32 600 0 1000 200

#fraganim FLAVOR_KEY_SAVE [Fon0T] 3
#frag 0x808080 0 0 6 0 64 8 64 32 -200 0 200 200
#frag 0x808080 0 0 6 0 72 24 64 32 200 0 600 200
#frag 0x808080 0 0 6 0 72 16 64 32 600 0 1000 200

#fraganim FLAVOR_SUPER [Fon0T] 2
#frag 0x808080 0 0 5 0 64 24 64 32 -200 0 200 200
#frag 0x808080 0 0 5 0 64 16 64 32 200 0 600 200

#fraganim OUT_OF_GREEN [Fon0T] 2
#frag 0x00FF00 0 0 1 0 92 20 16 16 -200 100 -100 200
#frag 0x00FF00 0 0 1 0 92 16 16 16 -275 0 -175 100

#fraganim OUT_OF_YELLOW [Fon0T] 2
#frag 0x00FFFF 0 0 1 0 92 20 16 16 -200 100 -100 200
#frag 0x00FFFF 0 0 1 0 92 16 16 16 -275 0 -175 100

#fraganim OUT_OF_WHITE [Fon0T] 2
#frag 0xFFFFFF 0 0 1 0 92 20 16 16 -200 100 -100 200
#frag 0xFFFFFF 0 0 1 0 92 16 16 16 -275 0 -175 100

#sprite ARROW [Fon0T]
#tex 0x808080 0 3 8 3 64 4 32 16

#fraganim CARD_BLOCKS_BACKGROUND [Fon0T] 12
#frag 0x808080 1 3 0 2 0 16 64 64 0 -800 800 0
#frag 0x808080 1 3 0 2 16 16 64 64 800 -800 1600 0
#frag 0x808080 1 3 0 2 32 16 64 64 1600 -800 2400 0
#frag 0x808080 1 3 0 2 80 16 16 64 2400 -800 2600 0
#frag 0x808080 1 3 0 2 0 8 64 32 0 -1200 800 -800
#frag 0x808080 1 3 0 2 16 8 64 32 800 -1200 1600 -800
#frag 0x808080 1 3 0 2 32 8 64 32 1600 -1200 2400 -800
#frag 0x808080 1 3 0 2 72 8 16 32 2400 -1200 2600 -800
#frag 0x808080 1 3 0 2 0 6 64 8 0 -1300 800 -1200
#frag 0x808080 1 3 0 2 0 4 64 8 800 -1300 1600 -1200
#frag 0x808080 1 3 0 2 0 2 64 8 1600 -1300 2400 -1200
#frag 0x808080 1 3 0 2 16 2 16 8 2400 -1300 2600 -1200

#fraganim PASSWORD_BACKGROUND_NORMAL [AsciT] 4
#frag 0x808080 0 3 2 0 0 8 64 32 -700 -125 -300 75
#frag 0x808080 0 3 3 0 8 8 64 32 -300 -125 100 75
#frag 0x808080 0 3 4 0 16 8 64 32 100 -125 500 75
#frag 0x808080 0 3 5 0 24 8 64 32 500 -125 900 75

#fraganim PASSWORD_BACKGROUND_SUPER [AsciT] 4
#frag 0x808080 0 3 6 0 0 16 64 64 -700 -225 -300 175
#frag 0x808080 0 3 7 0 8 16 64 64 -300 -225 100 175
#frag 0x808080 0 3 8 0 16 16 64 64 100 -225 500 175
#frag 0x808080 0 3 9 0 24 16 64 64 500 -225 900 175

#sprite CARD_ICONS [Fon0T]
#tex 0x808080 0 3 8 0 92 4 16 16
#tex 0x808080 0 3 8 0 94 28 16 16
#tex 0x808080 0 3 8 0 94 24 16 16
#tex 0x808080 0 3 9 0 94 20 16 16
#tex 0x808080 0 3 9 0 94 16 16 16
#tex 0x808080 0 3 9 0 94 12 16 16
#tex 0x808080 0 3 10 0 94 8 16 16
#tex 0x808080 0 3 10 0 94 4 16 16
#tex 0x808080 0 3 10 0 96 28 16 16
#tex 0x808080 0 3 11 0 96 24 16 16
#tex 0x808080 0 3 11 0 96 20 16 16
#tex 0x808080 0 3 11 0 96 16 16 16
#tex 0x808080 0 3 12 0 96 12 16 16
#tex 0x808080 0 3 12 0 96 8 16 16
#tex 0x808080 0 3 12 0 96 4 16 16
#tex 0x808080 0 3 13 0 98 28 16 16
#tex 0x808080 0 3 13 0 98 24 16 16
#tex 0x808080 0 3 13 0 98 20 16 16
#tex 0x808080 0 3 14 0 98 16 16 16
#tex 0x808080 0 3 14 0 98 12 16 16
#tex 0x808080 0 3 14 0 98 8 16 16
#tex 0x808080 0 3 15 0 98 4 16 16
#tex 0x808080 0 3 15 0 100 28 16 16
#tex 0x808080 0 3 15 0 100 24 16 16
#tex 0x808080 0 3 0 3 100 20 16 16
#tex 0x808080 0 3 0 3 100 16 16 16
#tex 0x808080 0 3 0 3 100 12 16 16
#tex 0x808080 0 3 1 3 100 8 16 16
#tex 0x808080 0 3 1 3 100 4 16 16
#tex 0x808080 0 3 1 3 102 28 16 16
#tex 0x808080 0 3 2 3 102 24 16 16
#tex 0x808080 0 3 2 3 102 20 16 16
#tex 0x808080 0 3 2 3 102 16 16 16
#tex 0x808080 0 3 3 3 102 12 16 16
#tex 0x808080 0 3 3 3 102 8 16 16
#tex 0x808080 0 3 3 3 102 4 16 16
#tex 0x808080 0 3 4 3 104 28 16 16
#tex 0x808080 0 3 4 3 104 24 16 16
#tex 0x808080 0 3 4 3 104 20 16 16
#tex 0x808080 0 3 5 3 104 16 16 16
#tex 0x808080 0 3 5 3 104 12 16 16
#tex 0x808080 0 3 5 3 104 8 16 16
#tex 0x808080 0 3 6 3 104 4 16 16
#tex 0x808080 0 3 6 3 106 28 16 16
#tex 0x808080 0 3 6 3 106 24 16 16
#tex 0x808080 0 3 7 0 92 12 16 16
#tex 0x808080 0 3 7 0 92 8 16 16

#sprite CARD_ICON_DAMAGED [Fon0T]
#tex 0x808080 0 3 7 3 106 20 16 16

#font FONT [Fon0T]
#char 0x000000 0 0 0 0 0 0 4 4 400 420 //  
#char 0x808080 0 0 1 0 80 4 16 16 400 0 // !
#char 0x000000 0 0 0 0 0 0 4 4 400 420 // "
#char 0x808080 1 0 0 1 24 4 32 16 800 0 // #
#char 0x808080 0 0 1 0 90 20 16 16 400 0 // $
#char 0x000000 0 0 0 0 0 0 4 4 400 420 // %
#char 0x141414 0 2 2 0 92 24 16 16 400 0 // &
#char 0x808080 0 0 1 0 90 8 16 16 300 0 // '
#char 0x000000 0 0 0 0 0 0 4 4 400 420 // (
#char 0x000000 0 0 0 0 0 0 4 4 400 420 // )
#char 0x808080 1 0 0 1 16 4 32 16 800 0 // *
#char 0x808080 1 0 0 1 32 4 32 16 800 0 // +
#char 0x808080 0 0 1 0 90 4 16 16 300 0 // ,
#char 0x808080 0 0 1 0 90 16 16 16 400 0 // -
#char 0x808080 0 0 1 0 90 12 16 16 250 0 // .
#char 0x000000 0 0 0 0 0 0 4 4 400 420 // /
#char 0x808080 0 0 1 0 68 4 16 16 400 0 // 0
#char 0x808080 0 0 1 0 70 4 16 16 400 0 // 1
#char 0x808080 0 0 1 0 72 4 16 16 400 0 // 2
#char 0x808080 0 0 1 0 74 4 16 16 400 0 // 3
#char 0x808080 0 0 1 0 76 4 16 16 400 0 // 4
#char 0x808080 0 0 1 0 78 12 16 16 400 0 // 5
#char 0x808080 0 0 1 0 78 8 16 16 400 0 // 6
#char 0x808080 0 0 1 0 78 4 16 16 400 0 // 7
#char 0x808080 0 0 1 0 80 12 16 16 400 0 // 8
#char 0x808080 0 0 1 0 80 8 16 16 400 0 // 9
#char 0x808080 0 0 1 0 92 28 16 16 300 0 // :
#char 0x000000 0 0 0 0 0 0 4 4 400 420 // ;
#char 0x000000 0 0 0 0 0 0 4 4 400 420 // <
#char 0x808080 0 3 10 3 20 2 8 8 400 0 // =
#char 0x808080 0 3 8 3 64 4 32 16 400 0 // >
#char 0x808080 0 0 9 3 106 16 16 16 400 0 // ?
#char 0x000000 0 0 0 0 0 0 4 4 400 420 // @
#char 0x808080 0 0 1 0 82 12 16 16 400 0 // A
#char 0x808080 0 0 1 0 82 8 16 16 400 0 // B
#char 0x808080 0 0 1 0 82 4 16 16 400 0 // C
#char 0x808080 0 0 1 0 84 28 16 16 400 0 // D
#char 0x808080 0 0 1 0 84 24 16 16 400 0 // E
#char 0x808080 0 0 1 0 84 20 16 16 400 0 // F
#char 0x808080 0 0 1 0 84 16 16 16 400 0 // G
#char 0x808080 0 0 1 0 84 12 16 16 400 0 // H
#char 0x808080 0 0 1 0 84 8 16 16 400 0 // I
#char 0x808080 0 0 1 0 84 4 16 16 400 0 // J
#char 0x808080 0 0 1 0 86 28 16 16 400 0 // K
#char 0x808080 0 0 1 0 86 24 16 16 400 0 // L
#char 0x808080 0 0 1 0 86 20 16 16 400 0 // M
#char 0x808080 0 0 1 0 86 16 16 16 400 0 // N
#char 0x808080 0 0 1 0 86 12 16 16 400 0 // O
#char 0x808080 0 0 1 0 86 8 16 16 400 0 // P
#char 0x808080 0 0 1 0 86 4 16 16 400 0 // Q
#char 0x808080 0 0 1 0 88 28 16 16 400 0 // R
#char 0x808080 0 0 1 0 88 24 16 16 400 0 // S
#char 0x808080 0 0 1 0 88 20 16 16 400 0 // T
#char 0x808080 0 0 1 0 88 16 16 16 400 0 // U
#char 0x808080 0 0 1 0 88 12 16 16 400 0 // V
#char 0x808080 0 0 1 0 88 8 16 16 400 0 // W
#char 0x808080 0 0 1 0 88 4 16 16 400 0 // X
#char 0x808080 0 0 1 0 90 28 16 16 400 0 // Y
#char 0x808080 0 0 1 0 90 24 16 16 400 0 // Z
#char 0x000000 0 0 0 0 0 0 4 4 400 420 // [
#char 0x000000 0 0 0 0 0 0 4 4 400 420 // \
#char 0x000000 0 0 0 0 0 0 4 4 400 420 // ]
#char 0x808080 1 0 0 1 40 4 32 16 800 0 // ^
#char 0x000000 0 0 0 0 0 0 4 4 400 420 // _
#char 0x808080 0 0 1 0 90 8 16 16 300 0 // `
#char 0x000000 0 0 0 0 0 0 4 4 400 420 // a
#char 0x000000 0 0 0 0 0 0 4 4 400 420 // b
#char 0x808080 0 0 1 0 48 4 32 16 400 0 // c
#char 0x000000 0 0 0 0 0 0 4 4 400 420 // d
#char 0x000000 0 0 0 0 0 0 4 4 400 420 // e
#char 0x000000 0 0 0 0 0 0 4 4 400 420 // f
#char 0x000000 0 0 0 0 0 0 4 4 400 420 // g
#char 0x000000 0 0 0 0 0 0 4 4 400 420 // h
#char 0x000000 0 0 0 0 0 0 4 4 400 420 // i
#char 0x000000 0 0 0 0 0 0 4 4 400 420 // j
#char 0x000000 0 0 0 0 0 0 4 4 400 420 // k
#char 0x000000 0 0 0 0 0 0 4 4 400 420 // l
#char 0x000000 0 0 0 0 0 0 4 4 400 420 // m
#char 0x000000 0 0 0 0 0 0 4 4 400 420 // n
#char 0x000000 0 0 0 0 0 0 4 4 400 420 // o
#char 0x000000 0 0 0 0 0 0 4 4 400 420 // p
#char 0x000000 0 0 0 0 0 0 4 4 400 420 // q
#char 0x000000 0 0 0 0 0 0 4 4 400 420 // r
#char 0x808080 0 0 1 0 52 4 32 16 400 0 // s
#char 0x808080 0 0 1 0 60 4 32 16 400 0 // t
#char 0x000000 0 0 0 0 0 0 4 4 400 420 // u
#char 0x000000 0 0 0 0 0 0 4 4 400 420 // v
#char 0x000000 0 0 0 0 0 0 4 4 400 420 // w
#char 0x808080 0 0 1 0 56 4 32 16 400 0 // x
#char 0x000000 0 0 0 0 0 0 4 4 400 420 // y

#text TEXT FONT [1038I]
"めざめの　ビーチ"
"えんばんいわの　ジャングル"
"のぼれ！　クラッシュ"
"おおいわ　ゴロゴロ"
"さかなに　きをつけろ"
"ふとっちょの　パプパプ"
"えんばんいわの　はて"
"イノシシ　ダッシュ！"
"とりでの　てっぺんへ"
"じょうりゅうを　めざせ"
"いかれた　リパールー"
"とかげで　だいジャンプ"
"こだいの　しんでん"
"また　おおいわだ！"
"ゆうやけの　はいきょ"
"しんでんの　おくふかく"
"コアラコングは　ちからもち"
"コルテックスの　はつでんしょ"
"きかいか　けいかく"
"はつでんしつ　しんにゅう"
"ドラムかん　ステップ"
"クールな　ピンストライプ"
"きりの　つりばしで"
"カメカメ　ジャンプ"
"くらやみで　ドッキリ"
"かがくの　ニトラス　ブリオ"
"あらしの　こじょう"
"ビリビリ　けんきゅういん"
"きかいかは　すすむ"
"コルテックスと　いっきうち"
"ふかい　くらやみの　なかで"
"イノシシ　チャレンジ"
"しろダイヤの　いきさきは？"
"UNKNOWN LEVEL"
"~c0~sx800~^~sx400~~c1　ロードを　やめます"
"メモリーカードを　さがしています"
"メモリーカードを　いれてください"
"　ロードを　やめます"
"フォーマット　チェックちゅう"
"フォーマット　されていません"
"カードの　いちらん　を　よんでいます"
"~c0~sx800~*~sx400~~c1／~c0~sx800~+~sx400~~c1　ロードします"
"セーブデータを　えらんでください"
"よんでいます"
"セーブエラー　です"
"~c0~sx800~*~sx400~~c1／~c0~sx800~+~sx400~~c1　もういちど　おこなって　ください"
"クラッシュの"
"データでは"
"ありません"
"~c0~sx800~^~sx400~~c1　セーブを　やめます"
"カードが　フォーマット　されていません"
"フォーマット　しますか？"
"いいえ"
"はい"
">"
"べつの　カードを　いれるか、キャンセル　してください"
"フォーマット　しています"
"~c0~sx800~*~sx400~~c1／~c0~sx800~+~sx400~~c1　セーブします"
"セーブする　ブロックを　えらんでください"
"この　ブロックは　つかわれています"
"うわがきしますか？"
"セーブ　しています"
"~c0~sx800~^~sx400~~c1　ブロックかカードを　えらんでください"
"~c0~sx800~*~sx400~~c1／~c0~sx800~+~sx400~~c1　げんざいの　データを　　うわがきします。"
"~c0~sx800~#~sx400~~c1 UNFORMAT==============="
"セーブ　オプションを　えらんでください"
"~c0~sx800~^~sx400~~c1 ~c0~sx800~#~sx400~~c1 ~c0~sx800~*~sx400~~c1 UNFORMAT"
"~c0~sx800~=~sx400~~c1 ~c0~sx800~+~sx400~~c1 ~c0~sx800~=~sx400~~c1 CANCEL=="
"CARD UNFORMATTED"
"~c0~sx800~*~sx400~~c1／~c0~sx800~+~sx400~~c1　コンティニュー"
"セーブ　かんりょう"
"FINAL PASSWORD:"
"%d$ クリア"
"~c0~sx800~*~sx400~~c1　か　~c0~sx800~+~sx400~~c1　ボタンを　おしてください"
"YOUR PASSWORD:"
"~c0~sx800~^~sx400~~c1 MEMORY CARD"
"~c0~sx800~+~sx400~~c1 CONTINUE==="
"c"
"s"
"x"
"t"
"PASSWORD"
"%d"
"32"
"ステージ"
"2"
"26"
"パスワードが　まちがっています"
"パスワードを　いれてください"
"スーパーパスワードを　いれてください"
"TESTING PASSWORD SYSTEM"
"THIS WILL TAKE FOREVER"
"CHECK CONSOLE FOR ERRORS"
"%d TRIALS PASSED"
"%02d LEVELS"
"%02d GEMS=="
"%02d KEYS=="

#spawn S_CARD_MASTER              Card_Master_Spawn
#spawn S_1                        __s_1
#spawn S_CARD_TEXT                Card_Text_Stance
#spawn S_CARD_TEXT_FLASH          Card_Text_Stance
#spawn S_CARD_SPRITE              Card_Sprite_Stance
#spawn S_5                        __s_5
#spawn S_6                        __s_6
#spawn S_7                        __s_7
#spawn S_CARD_BLOCKS_BACKGROUND   Card_Blocks_Background_Stance
#spawn S_SUPER_PASSWORD           Super_Password_Stance
#spawn S_10                       __s_10
#spawn S_STATS_LEVELS             Stats_Levels
#spawn S_STATS_KEYS               Stats_Keys
#spawn S_STATS_GEMS               Stats_Gems
#spawn S_CARD_TEXT_SPRITE         Text_Sprite_Stance
#spawn S_PASSWORD_CHAR_NORMAL     Password_Character_Normal
#spawn S_PASSWORD_CHAR_SUPER      Password_Character_Super
#spawn S_PASSWORD_TEXT_INSERT     Password_Text_Insert_Master
#spawn S_PASSWORD_TEXT_PASSWORD   Password_Text_Password_Master
#spawn S_PASSWORD_TEXT_SUPER      Password_Text_Super_Master
#spawn S_PASSWORD_BACKGROUND      Password_Background_Master
#spawn S_PASSWORD_INPUT_CHAR      Password_Input_Character_Stance
#spawn S_22                       __s_22
#spawn S_GAME_STATS               Game_Stats_Master
#spawn S_CARD_TEXT_CENTER         Card_Text_Stance
#spawn S_25                       __s_25
#spawn S_CARD_TEXT_CENTER_FLASH   Card_Text_Stance
#spawn S_CARD_BLOCK_ICON          Card_Block_Icon
#spawn S_CARD_BLOCKS_ARROW        Card_Blocks_Arrow
#spawn S_LOAD_GAME_GEM_MASTER     Load_Game_Gem_Master
#spawn S_LOAD_GAME_KEY_MASTER     Load_Game_Key_Master
#spawn S_LOAD_GAME_LEVEL_MASTER   Load_Game_Level_Master
#spawn S_LOAD_GAME_INVALID_MASTER Load_Game_Invalid_Master
#spawn S_SAVE_POINT_TEXT          Save_Point_Text_Master
#spawn S_SAVE_POINT_TEXT_INGAME   Save_Point_Text_Master
#spawn S_BACKGROUND               Background_Stance

var PasswordCharIndex, PasswordLevels, PasswordItems1, PasswordItems2,
BlockData, BlockFrameStart, CardShowBlocks, BlockIndex, BlockAnimFrame,
OldBlockData, OldBlockIndex, MenuTime,
FinalLevels, FinalCurrentLevel, FinalItems1, FinalItems2

event Event12 => state Die_Fast1
event Event30 => state Die_Fast2

#include "AsciC.gooh"

sub CalcLevels (levels, keys) {
	entity = 0
	entity = levels
	if (keys == -1) {
		if (ITEM_HAS_KEY1) {
			entity += 1
		}
		if (ITEM_HAS_KEY2) {
			entity += 1
		}
	}
	else {
		entity += keys
	}
	entity -= 1
}

inline sub GetAdjustedLevelProg() {
	if (var temp = SAVETYPE; temp == SAVE_TYPE_LEVEL) {
		if (var temp2 = CURRENTLEVEL;
		   temp2 == 3
		|| temp2 == 5
		|| temp2 == 10
		|| temp2 == 14
		|| temp2 == 24
		|| temp2 == 21
		|| temp2 == 23
		|| temp2 == 25
		|| temp2 == 26
		|| temp2 == 13
		|| temp2 == 16
		|| temp2 == 27
		) {
			misc = CURRENTLEVEL+1
		}
		else {
			misc = CURRENTLEVEL
		}
	}
	else {
		misc = LEVELCOUNT
	}
	CalcProgress()
	if (GEMCOUNT == 26) {
		LEVELCOUNT = 31
		LEVELSUNLOCKED = 31
	}
	if (LEVELCOUNT > misc) {
		misc = LEVELCOUNT
	}
}

inline sub EncodeNormalPassword(encode_op) {
	var passcode = 1, mask = 1<<30
	do (var i = 0) {
		passcode = passcode*passcode % 32399
		if ((0x2D83 & mask) != 0) {
			passcode = passcode*encode_op % 32399
		}
		mask >>= 1
	} while ({i+=1.0}; i < 31.0)
	misc = passcode
}

inline sub EncodeSuperPassword(encode_op) {
	var passcode = 1, mask = 1<<30
	do (var i = 0) {
		passcode = passcode*passcode % 2021
		if ((0x305 & mask) != 0) {
			passcode = passcode*encode_op % 2021
		}
		mask >>= 1
	} while ({i+=1.0}; i < 31.0)
	misc = passcode
}

sub EncodePassword () {
	var levels, gems, keys
	if (AUTOPASSWORD) {
		levels = CURRENTLEVEL
	}
	else {
		GetAdjustedLevelProg()
		levels = misc
		if (SAVETYPE == SAVE_TYPE_LEVEL) {
			LEVELCOUNT = levels
		}
	}
	if (ITEM_GEM1) gems |= 1 << 0;
	if (ITEM_GEM2) gems |= 1 << 1;
	if (ITEM_GEM3) gems |= 1 << 2;
	if (ITEM_GEM4) gems |= 1 << 3;
	if (ITEM_GEM5) gems |= 1 << 4;
	if (ITEM_GEM6) gems |= 1 << 5;
	if (ITEM_GEM7) gems |= 1 << 6;
	if (ITEM_GEM8) gems |= 1 << 7;
	if (ITEM_GEM9) gems |= 1 << 8;
	if (ITEM_GEM10) gems |= 1 << 9;
	if (ITEM_GEM11) gems |= 1 << 10;
	if (ITEM_GEM12) gems |= 1 << 11;
	if (ITEM_GEM13) gems |= 1 << 12;
	if (ITEM_GEM14) gems |= 1 << 13;
	if (ITEM_GEM15) gems |= 1 << 14;
	if (ITEM_GEM16) gems |= 1 << 15;
	if (ITEM_GEM17) gems |= 1 << 16;
	if (ITEM_GEM18) gems |= 1 << 17;
	if (ITEM_GEM19) gems |= 1 << 18;
	if (ITEM_GEM20) gems |= 1 << 19;
	if (ITEM_GEM21) gems |= 1 << 20;
	if (ITEM_GEM22) gems |= 1 << 21;
	if (ITEM_GEM23) gems |= 1 << 22;
	if (ITEM_GEM24) gems |= 1 << 23;
	if (ITEM_GEM25) gems |= 1 << 24;
	if (ITEM_GEM26) gems |= 1 << 25;
	if (ITEM_KEY1) keys |= 1 << 0;
	if (ITEM_KEY2) keys |= 1 << 1;
	if (gems == 0) {
		var passcode1
		vely = false
		EncodeNormalPassword(levels | (keys<<5))
		velz = misc
		velz = 0x18D ^ velz
	}
	else {
		var passcode1, passcode2, passcode3, passcode4, encodedpasscode1, encodedpasscode2, encodedpasscode3, encodedpasscode4, v14
		vely = true
		EncodeSuperPassword((levels | (keys<<5)) | ((gems&3)<<7))
		passcode1 = misc
		EncodeSuperPassword((gems & 0x1FF<<2)>>2)
		passcode2 = misc
		EncodeSuperPassword((gems & 0x1FF<<11)>>11)
		passcode3 = misc
		EncodeSuperPassword((gems & 0x3F<<20)>>20)
		passcode4 = misc		
		passcode1 ^= 0x18D
		passcode2 ^= 0x24E
		passcode3 ^= 0x3E4
		passcode4 ^= 0x139
		encodedpasscode1 = passcode1 ^ passcode2 ^ passcode3
		encodedpasscode2 = passcode2 ^ passcode3 ^ passcode4
		encodedpasscode3 = passcode3 ^ passcode4 ^ passcode1
		encodedpasscode4 = passcode4 ^ passcode1 ^ passcode2
		velz = encodedpasscode1 | (encodedpasscode2 << 11)
		trotx = encodedpasscode3 | (encodedpasscode4 << 11)
	}
}

sub SpawnLevelText (level, y_offset, size_x, size_y, r1, g1, b1, r2, g2, b2) {
	if (var temp = level; temp == 1) {
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, y_offset, TEXT, 0, offsetof(var0), size_x, size_y, r1, g1, b1, r2, g2, b2, true) // めざめの　ビーチ
	}
	else if (temp == 2) {
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, y_offset, TEXT, 1.0, offsetof(var0), size_x, size_y, r1, g1, b1, r2, g2, b2, true) // えんばんいわの　ジャングル
	}
	else if (temp == 3) {
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, y_offset, TEXT, 2.0, offsetof(var0), size_x, size_y, r1, g1, b1, r2, g2, b2, true) // のぼれ！　クラッシュ
	}
	else if (temp == 4) {
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, y_offset, TEXT, 3.0, offsetof(var0), size_x, size_y, r1, g1, b1, r2, g2, b2, true) // おおいわ　ゴロゴロ
	}
	else if (temp == 5) {
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, y_offset, TEXT, 4.0, offsetof(var0), size_x, size_y, r1, g1, b1, r2, g2, b2, true) // さかなに　きをつけろ
	}
	else if (temp == 6) {
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, y_offset, TEXT, 5.0, offsetof(var0), size_x, size_y, r1, g1, b1, r2, g2, b2, true) // ふとっちょの　パプパプ
	}
	else if (temp == 7) {
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, y_offset, TEXT, 6.0, offsetof(var0), size_x, size_y, r1, g1, b1, r2, g2, b2, true) // えんばんいわの　はて
	}
	else if (temp == 8) {
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, y_offset, TEXT, 7.0, offsetof(var0), size_x, size_y, r1, g1, b1, r2, g2, b2, true) // イノシシ　ダッシュ！
	}
	else if (temp == 9) {
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, y_offset, TEXT, 8.0, offsetof(var0), size_x, size_y, r1, g1, b1, r2, g2, b2, true) // とりでの　てっぺんへ
	}
	else if (temp == 10) {
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, y_offset, TEXT, 9.0, offsetof(var0), size_x, size_y, r1, g1, b1, r2, g2, b2, true) // じょうりゅうを　めざせ
	}
	else if (temp == 11) {
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, y_offset, TEXT, 10.0, offsetof(var0), size_x, size_y, r1, g1, b1, r2, g2, b2, true) // いかれた　リパールー
	}
	else if (temp == 12) {
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, y_offset, TEXT, 11.0, offsetof(var0), size_x, size_y, r1, g1, b1, r2, g2, b2, true) // とかげで　だいジャンプ
	}
	else if (temp == 13) {
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, y_offset, TEXT, 12.0, offsetof(var0), size_x, size_y, r1, g1, b1, r2, g2, b2, true) // こだいの　しんでん
	}
	else if (temp == 15) {
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, y_offset, TEXT, 13.0, offsetof(var0), size_x, size_y, r1, g1, b1, r2, g2, b2, true) // また　おおいわだ！
	}
	else if (temp == 24) {
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, y_offset, TEXT, 14.0, offsetof(var0), size_x, size_y, r1, g1, b1, r2, g2, b2, true) // ゆうやけの　はいきょ
	}
	else if (temp == 26) {
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, y_offset, TEXT, 15.0, offsetof(var0), size_x, size_y, r1, g1, b1, r2, g2, b2, true) // しんでんの　おくふかく
	}
	else if (temp == 17) {
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, y_offset, TEXT, 16.0, offsetof(var0), size_x, size_y, r1, g1, b1, r2, g2, b2, true) // コアラコングは　ちからもち
	}
	else if (temp == 19) {
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, y_offset, TEXT, 17.0, offsetof(var0), size_x, size_y, r1, g1, b1, r2, g2, b2, true) // コルテックスの　はつでんしょ
	}
	else if (temp == 18) {
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, y_offset, TEXT, 18.0, offsetof(var0), size_x, size_y, r1, g1, b1, r2, g2, b2, true) // きかいか　けいかく
	}
	else if (temp == 20) {
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, y_offset, TEXT, 19.0, offsetof(var0), size_x, size_y, r1, g1, b1, r2, g2, b2, true) // はつでんしつ　しんにゅう
	}
	else if (temp == 21) {
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, y_offset, TEXT, 20.0, offsetof(var0), size_x, size_y, r1, g1, b1, r2, g2, b2, true) // ドラムかん　ステップ
	}
	else if (temp == 22) {
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, y_offset, TEXT, 21.0, offsetof(var0), size_x, size_y, r1, g1, b1, r2, g2, b2, true) // クールな　ピンストライプ
	}
	else if (temp == 23) {
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, y_offset, TEXT, 22.0, offsetof(var0), size_x, size_y, r1, g1, b1, r2, g2, b2, true) // きりの　つりばしで
	}
	else if (temp == 14) {
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, y_offset, TEXT, 23.0, offsetof(var0), size_x, size_y, r1, g1, b1, r2, g2, b2, true) // カメカメ　ジャンプ
	}
	else if (temp == 25) {
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, y_offset, TEXT, 24.0, offsetof(var0), size_x, size_y, r1, g1, b1, r2, g2, b2, true) // くらやみで　ドッキリ
	}
	else if (temp == 28) {
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, y_offset, TEXT, 25.0, offsetof(var0), size_x, size_y, r1, g1, b1, r2, g2, b2, true) // かがくの　ニトラス　ブリオ
	}
	else if (temp == 16) {
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, y_offset, TEXT, 26.0, offsetof(var0), size_x, size_y, r1, g1, b1, r2, g2, b2, true) // あらしの　こじょう
	}
	else if (temp == 29) {
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, y_offset, TEXT, 27.0, offsetof(var0), size_x, size_y, r1, g1, b1, r2, g2, b2, true) // ビリビリ　けんきゅういん
	}
	else if (temp == 27) {
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, y_offset, TEXT, 28.0, offsetof(var0), size_x, size_y, r1, g1, b1, r2, g2, b2, true) // きかいかは　すすむ
	}
	else if (temp == 31) {
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, y_offset, TEXT, 29.0, offsetof(var0), size_x, size_y, r1, g1, b1, r2, g2, b2, true) // コルテックスと　いっきうち
	}
	else if (temp == 40) {
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, y_offset, TEXT, 30.0, offsetof(var0), size_x, size_y, r1, g1, b1, r2, g2, b2, true) // ふかい　くらやみの　なかで
	}
	else if (temp == 50) {
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, y_offset, TEXT, 31.0, offsetof(var0), size_x, size_y, r1, g1, b1, r2, g2, b2, true) // イノシシ　チャレンジ
	}
	else if (temp == 30) {
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, y_offset, TEXT, 32.0, offsetof(var0), size_x, size_y, r1, g1, b1, r2, g2, b2, true) // しろダイヤの　いきさきは？
	}
	else {
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, y_offset, TEXT, 33.0, offsetof(var0), size_x, size_y, r1, g1, b1, r2, g2, b2, true) // UNKNOWN LEVEL
	}
}

state Card_Master_Spawn { // 0
	stateflag 0x60001
	statusc 0x5000
	code () {
		spawn(CardC, S_BACKGROUND, 1, 0, 0)
		TITLEPAUSESTATE = -1
		changestate(Card_Master_Select_Screen)
	}
}

state Card_Master_Select_Screen { // 1
	stateflag 0x60001
	statusc 0x5000
	code () {
		AUTOPASSWORD = false
		cascadeevent(Event30, self)
		playnull()
		GAMEFLAGS &= ~(0x1 | 0x2 | 0x10 | 0x40 | 0x80 | 0x200 | 0x800 | 0x1000 | 0x100000)
		killobjs()
		playnull()
		if (GLOBALVAL != 0) {
			SetScale(1.0S)
			SetRot(0, 0, 0)
			if (var temp = GLOBALVAL; temp == 1) {
				changestate(Menu_Save_Point_Password)
			}
			else if (temp == 2) {
				changestate(Menu_Save_Game)
			}
			else if (temp == 3) {
				changestate(Menu_Password)
			}
			else if (temp == 4) {
				changestate(Menu_Load_Game)
			}
			else if (temp == 5) { // unused in J
				changestate(Menu_Save_Point_Password)
			}
			else if (temp == 6) { // unused in J
				changestate(Menu_Save_Point_Password)
			}
			else if (temp == 7) { // unused in J
				changestate(Menu_Save_Point_Password)
			}
			else if (temp == 8) { // unused in J
				changestate(Menu_Test_Save)
			}
			else if (temp == 9) {
				changestate(Menu_Check_Save_Point)
			}
			else if (temp == 10) { // unused in J
				changestate(Menu_Password_Test)
			}
			else if (temp == 11) { // unused in J
				changestate(Menu_Final_Password)
			}
			else if (temp == 13) {
				changestate(Menu_Test_Save) // test save system
			}
		}
	}
}

state Menu_Check_Save_Point { // 2
	stateflag 0x60001
	statusc 0
	code () {
		#ifnreg "ntsc-j"
		memcardfn(8)
		changestateif(Menu_Save_Point_Password, misc)
		memcardfn(7)
		changestateif(Menu_Save_Game, misc)
		changestate(Menu_Test_Save)
		#else
		memcardfn(8)
		if (misc) {
			changestate(Menu_Save_Game)
		}
		memcardfn(7)
		changestateif(Menu_Save_Game, misc)
		changestate(Menu_Test_Save)
		#endif
	}
}

sub Sub_848 () {
	GAMEFLAGS &= ~(0x80000 | 0x2000)
}

state Menu_Load_Game { // 3
	stateflag 0x60001
	statusc 0
	code () {
		GAMEFLAGS &= ~(0x1 | 0x2 | 0x10 | 0x40 | 0x80 | 0x200 | 0x800 | 0x1000)
		memcardfn(10)
		GAMEFLAGS |= 0x100000
		Sub_848()
		killobjs()
		CARDICONBUF = getanim(CARD_ICONS)
		spawn(AsciC, AsciC_S_ASCII_TEXT_MASTER)
		CardShowBlocks = false
		BlockIndex = -1
		do (var i = 0) {
			spawn(CardC, S_CARD_BLOCK_ICON, 1, -216.0, 88.0, i >> 8)
		} while ({i+=1.0}; i < 15.0)
		spawn(CardC, S_CARD_BLOCKS_ARROW, 1, -216.0, 88.0)
		spawn(CardC, S_LOAD_GAME_GEM_MASTER, 1, 104.0, 32.0)
		spawn(CardC, S_LOAD_GAME_KEY_MASTER, 1, 8.0, 32.0)
		spawn(CardC, S_LOAD_GAME_LEVEL_MASTER, 1, 20.0, 72.0)
		spawn(CardC, S_LOAD_GAME_INVALID_MASTER, 1, 63.0, 69.0)
		spawn(AsciC, 3, 1, -232.0, -28.0, 71.0, 70.0)
		changestate(Menu_Load_Game_Look_For_Card)
	}
}

inline sub SoundMenuSelect() {
	statusb |= FLAG_2D
	soundpitch(4.0)
	sounddecay(.9375)
	soundplay([selpA], .8V)
	statusb &= ~FLAG_2D
}

inline sub SoundMenuInvalid() {
	statusb |= FLAG_2D
	soundpitch(3.84)
	soundplay([Ttb0A], 1V)
	statusb &= ~FLAG_2D
}

inline sub SoundMenuButton() {
	statusb |= FLAG_2D
	soundpitch(4.0)
	sounddelay(1)
	sounddecay(.9375)
	soundplay([Mb1iA], .5V)
	statusb &= ~FLAG_2D
}

inline sub ClearTextAndTransition(new_state) {
	cascadeevent(Event12, self)
	changestate(new_state)
}

state Menu_Load_Game_Look_For_Card { // 4
	stateflag 0x60001
	statusc 0x1000
	code () {
		BlockIndex = -1
		CardShowBlocks = false
		spawn(CardC, S_CARD_BLOCKS_BACKGROUND, 1, -216.0, 88.0)
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -40.0, TEXT, 34.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // ~c0~sx800~^~sx400~~c1　ロードを　やめます
		spawn(CardC, S_CARD_TEXT_CENTER_FLASH, 1, 0, -80.0, TEXT, 35.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // メモリーカードを　さがしています
		var0 = 0
		MenuTime = frametime
		do {
			if (var0 == 0 && frametime - MenuTime >= 10s) {
				memcardfn(10)
				var0 = 1
				sendevent(Event12, child)
				spawn(CardC, S_CARD_TEXT_CENTER_FLASH, 1, 0, -80.0, TEXT, 36.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // メモリーカードを　いれてください
			}
			if (var0 == 1 && frametime - MenuTime >= 30s && CARDSTATUS & 0x4) {
				memcardfn(10)
				var0 = 2
				sendevent(Event12, child)
				spawn(CardC, S_CARD_TEXT_CENTER_FLASH, 1, 0, -80.0, TEXT, 37.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // 　ロードを　やめます
			}
			changestateif(Menu_Return_To_Title, var0 == 2 && frametime - MenuTime >= 32s)
			playnull()
		} while (1)
	}
	trans {
		unless (STATUS_FIRSTFRAME) {
			if (buttonpress(PAD_TRIANGLE)) {
				SoundMenuSelect()
				changestate(Menu_Return_To_Title)
			}
			unless (CARDSTATUS & 0x4) {
				if (CARDSTATUS & 0x8) {
					ClearTextAndTransition(Menu_Load_Game_Check_Formatted)
				}
				else {
					ClearTextAndTransition(Menu_Load_Game_Read_Card)
				}
			}
		}
	}
}

state Menu_Load_Game_Check_Formatted { // 5
	stateflag 0x60001
	statusc 0x1000
	code () {
		BlockIndex = -1
		memcardfn(2)
		spawn(CardC, S_CARD_BLOCKS_BACKGROUND, 1, -216.0, 88.0)
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -40.0, TEXT, 34.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // ~c0~sx800~^~sx400~~c1　ロードを　やめます
		spawn(CardC, S_CARD_TEXT_CENTER_FLASH, 1, 0, -80.0, TEXT, 38.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // フォーマット　チェックちゅう
		var0 = false
		MenuTime = frametime
		do {
			if (!var0 && frametime - MenuTime >= 15s) {
				var0 = true
				sendevent(Event12, child)
				spawn(CardC, S_CARD_TEXT_CENTER_FLASH, 1, 0, -80.0, TEXT, 39.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // フォーマット　されていません
			}
			playnull()
		} while(1)
	}
	trans {
		unless (STATUS_FIRSTFRAME) {
			if (buttonpress(PAD_TRIANGLE)) {
				SoundMenuSelect()
				changestate(Menu_Return_To_Title)
			}
			if (CARDSTATUS & 0x4 || CARDSTATUS & 0x20) {
				ClearTextAndTransition(Menu_Load_Game_Look_For_Card)
			}
			unless (CARDSTATUS & 0x8) {
				ClearTextAndTransition(Menu_Load_Game_Read_Card)
			}
		}
	}
}

state Menu_Load_Game_Read_Card { // 6
	stateflag 0x60001
	statusc 0x1000
	code () {
		BlockIndex = -1
		spawn(CardC, S_CARD_BLOCKS_BACKGROUND, 1, -216.0, 88.0)
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -40.0, TEXT, 34.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // ~c0~sx800~^~sx400~~c1　ロードを　やめます
		spawn(CardC, S_CARD_TEXT_CENTER_FLASH, 1, 0, -80.0, TEXT, 40.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // カードの　いちらん　を　よんでいます
		CardShowBlocks = true
		sleepnull()
	}
	trans {
		unless (STATUS_FIRSTFRAME) {
			if (CARDSTATUS & 0x4 || CARDSTATUS & 0x20) {
				ClearTextAndTransition(Menu_Load_Game_Look_For_Card)
			}
			unless (CARDSTATUS & 0x1) {
				ClearTextAndTransition(Menu_Load_Game_Block_Select)
			}
		}
	}
}

inline sub InvalidateConfirm() {
	while (buttonpress(PAD_X) || buttonpress(PAD_O)) {
		playnull()
	}
}

inline sub NavigateMemcardBlocks() {	
	if (dirpress(PAD_E) && BlockIndex <= 9) {
		SoundMenuButton()
		BlockIndex += 5
	}
	if (dirpress(PAD_W) && BlockIndex >= 5) {
		SoundMenuButton()
		BlockIndex -= 5
	}
	if (dirpress(PAD_S) && BlockIndex <= 13) {
		SoundMenuButton()
		BlockIndex += 1
	}
	if (dirpress(PAD_N) && BlockIndex >= 1) {
		SoundMenuButton()
		BlockIndex -= 1
	}
}

state Menu_Load_Game_Block_Select { // 7
	stateflag 0x60001
	statusc 0x1000
	code () {
		BlockIndex = 0
		spawn(CardC, S_CARD_BLOCKS_BACKGROUND, 1, -216.0, 88.0)
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -43.0, TEXT, 34.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // ~c0~sx800~^~sx400~~c1　ロードを　やめます
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -59.0, TEXT, 41.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // ~c0~sx800~*~sx400~~c1／~c0~sx800~+~sx400~~c1　ロードします
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -80.0, TEXT, 42.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // セーブデータを　えらんでください
		CardShowBlocks = true
		InvalidateConfirm()
		do {
			NavigateMemcardBlocks()
			if (buttonpress(PAD_O) || buttonpress(PAD_X)) {
				var0 = getglobal(offsetof(CARDBLOCKDATA00)+(BlockIndex<<8))
				if (var0 & 0x1 && var0 & 0x8) {
					SoundMenuSelect()
					ClearTextAndTransition(Menu_Load_Game_Load_Block)
				}
				else {
					SoundMenuInvalid()
				}
			}
			playnull()
		} while (1)
	}
	trans {
		unless (STATUS_FIRSTFRAME) {
			if (buttonpress(PAD_TRIANGLE)) {
				SoundMenuSelect()
				changestate(Menu_Return_To_Title)
			}
			if (CARDSTATUS & 0x4 || CARDSTATUS & 0x20) {
				CardShowBlocks = false
				ClearTextAndTransition(Menu_Load_Game_Look_For_Card)
			}
		}
	}
}

inline sub LoadBlockData() {
	var mono = MONOSOUND, sfxvol = SFXVOL, musvol = MUSVOL
	memcardfn(4, BlockIndex)
	while (CARDSTATUS & 0x1) {
		playnull()
	}
	if (CARDSTATUS & 0x2 || CARDSTATUS & 0x8 || CARDSTATUS & 0x4 || CARDSTATUS & 0x20) {
		ClearTextAndTransition(Menu_Load_Game_Save_Error)
	}
	if (OPTIONSCHANGED) {
		MONOSOUND = mono
		SFXVOL = sfxvol
		MUSVOL = musvol
	}
	SAVEDLEVELCOUNT = LEVELCOUNT
	SAVEDITEMPOOL1 = ITEMPOOL1
	SAVEDITEMPOOL2 = ITEMPOOL2
}

state Menu_Load_Game_Load_Block { // 8
	stateflag 0x60001
	statusc 0x1000
	code () {
		CardShowBlocks = false
		spawn(CardC, S_CARD_BLOCKS_BACKGROUND, 1, -216.0, 88.0)
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -80.0, TEXT, 43.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // よんでいます
		playnull(2)
		LoadBlockData()
		GAMESTATE = GAME_STATE_PLAYING
		changestate(Menu_Return_To_Islands)
	}
}

state Menu_Load_Game_Save_Error { // 9
	stateflag 0x60001
	statusc 0x1000
	code () {
		spawn(CardC, S_CARD_BLOCKS_BACKGROUND, 1, -216.0, 88.0)
		spawn(CardC, S_CARD_TEXT_CENTER_FLASH, 1, 0, -80.0, TEXT, 44.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // セーブエラー　です
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -43.0, TEXT, 34.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // ~c0~sx800~^~sx400~~c1　ロードを　やめます
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -59.0, TEXT, 45.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // ~c0~sx800~*~sx400~~c1／~c0~sx800~+~sx400~~c1　もういちど　おこなって　ください
		sleepnull()
	}
	trans {
		if (buttonpress(PAD_TRIANGLE)) {
			SoundMenuSelect()
			changestate(Menu_Return_To_Title)
		}
		if (buttonpress(PAD_O) || buttonpress(PAD_X)) {
			SoundMenuSelect()
			ClearTextAndTransition(Menu_Load_Game_Look_For_Card)
		}
	}
}

state Card_Block_Icon { // 10
	stateflag 0x60001
	statusc 0x1000
	code (x_offset, y_offset, index) {
		statusb = FLAG_2D
		SetScale(.96, 1.015, 384.0)
		setanim(CARD_ICONS)
		BlockFrameStart = index*3
		SetTrans((x_offset+57.0) + index/5 * 64.0, (y_offset - index%5 * 18.0) - 14.0, 0)
		zindex = 20
		BlockAnimFrame = 0
		do {
			if (parent->CardShowBlocks) {
				BlockData = getglobal(offsetof(CARDBLOCKDATA00)+(index<<8))
				unless (BlockData & 0x1) {
					statusb |= FLAG_INVISIBLE
					playnull()
				}
				else {
					var block_frame_count = BlockData >> 1 & 0x3
					statusb &= ~FLAG_INVISIBLE
					setanim(CARD_ICONS)
					BlockAnimFrame += .2
					if (BlockAnimFrame >= block_frame_count << 8) {
						BlockAnimFrame = 0
					}
					if (BlockData >> 17 & 0x1) {
						playanim(0, CARD_ICON_DAMAGED)
					}
					else {
						playframe((BlockFrameStart << 8) + BlockAnimFrame)
					}
				}
			}
			else {
				statusb |= FLAG_INVISIBLE
				playnull()
			}
		} while (1)
	}
}

state Load_Game_Gem_Master { // 11
	stateflag 0x60001
	statusc 0x1000
	code (x_offset, y_offset) {
		OldBlockIndex = -1
		OldBlockData = 0
		do {
			BlockIndex = parent->BlockIndex
			BlockData = getglobal(offsetof(CARDBLOCKDATA00)+(BlockIndex<<8))
			if (BlockIndex < 0 || BlockIndex > 14) {
				cascadeevent(Event12, self)
				OldBlockIndex = -1
				OldBlockData = 0
			}
			else if (BlockIndex != OldBlockIndex || BlockData != OldBlockData) {
				OldBlockIndex = BlockIndex
				OldBlockData = BlockData
				cascadeevent(Event12, self)
				if (OldBlockData & 0x1 && OldBlockData & 0x8 && ((OldBlockData >> 15 & 0x3) > 0 || (OldBlockData >> 10 & 0x1F) > 0)) {
					spawn(CardC, S_STATS_GEMS, 1, x_offset, y_offset, OldBlockData >> 10 & 0x1F)
				}
			}
			playnull()
		} while (1)
	}
}

state Load_Game_Key_Master { // 12
	stateflag 0x60001
	statusc 0x1000
	code (x_offset, y_offset) {
		OldBlockIndex = -1
		OldBlockData = 0
		do {
			BlockIndex = parent->BlockIndex
			BlockData = getglobal(offsetof(CARDBLOCKDATA00)+(BlockIndex<<8))
			if (BlockIndex < 0 || BlockIndex > 14) {
				cascadeevent(Event12, self)
				OldBlockIndex = -1
				OldBlockData = 0
			}
			else if (BlockIndex != OldBlockIndex || BlockData != OldBlockData) {
				OldBlockIndex = BlockIndex
				OldBlockData = BlockData
				cascadeevent(Event12, self)
				if (OldBlockData & 0x1 && OldBlockData & 0x8 && ((OldBlockData >> 15 & 0x3) > 0 || (OldBlockData >> 10 & 0x1F) > 0)) {
					spawn(CardC, S_STATS_KEYS, 1, x_offset, y_offset, OldBlockData >> 15 & 0x3)
				}
			}
			playnull()
		} while (1)
	}
}

state Load_Game_Level_Master { // 13
	stateflag 0x60001
	statusc 0x1000
	code (x_offset, y_offset) {
		OldBlockIndex = -1
		OldBlockData = 0
		do {
			BlockIndex = parent->BlockIndex
			BlockData = getglobal(offsetof(CARDBLOCKDATA00)+(BlockIndex<<8))
			if (BlockIndex < 0 || BlockIndex > 14) {
				cascadeevent(Event12, self)
				OldBlockIndex = -1
				OldBlockData = 0
			}
			else if (BlockIndex != OldBlockIndex || BlockData != OldBlockData) {
				OldBlockIndex = BlockIndex
				OldBlockData = BlockData
				cascadeevent(Event12, self)
				if (OldBlockData & 0x1 && OldBlockData & 0x8) {
					CalcLevels(OldBlockData >> 5 & 0x1F, OldBlockData >> 15 & 0x3)
					if ((OldBlockData >> 10 & 0x1F) == 0 && (OldBlockData >> 15 & 0x3) == 0) {
						spawn(CardC, S_STATS_LEVELS, 1, x_offset, y_offset-19.0, entity)
					}
					else {
						spawn(CardC, S_STATS_LEVELS, 1, x_offset, y_offset, entity)
					}
				}
			}
			playnull()
		} while (1)
	}
}

state Load_Game_Invalid_Master { // 14
	stateflag 0x60001
	statusc 0x1000
	code (x_offset, y_offset) {
		OldBlockIndex = -1
		OldBlockData = 0
		do {
			BlockIndex = parent->BlockIndex
			BlockData = getglobal(offsetof(CARDBLOCKDATA00)+(BlockIndex<<8))
			if (BlockData != OldBlockData) {
				OldBlockIndex = BlockIndex
				OldBlockData = BlockData
				cascadeevent(Event12, self)
				if (OldBlockData & 0x1 && !(OldBlockData & 0x8)) {
					spawn(CardC, S_CARD_TEXT, 1, x_offset, y_offset-8.0, TEXT, 46.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // クラッシュの
					spawn(CardC, S_CARD_TEXT, 1, x_offset+8.0, y_offset-24.0, TEXT, 47.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // データでは
					spawn(CardC, S_CARD_TEXT, 1, x_offset+8.0, y_offset-40.0, TEXT, 48.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // ありません
				}
			}
			playnull()
		} while (1)
	}
}

state Card_Blocks_Arrow { // 15
	stateflag 0x60001
	statusc 0x1000
	code (x_offset, y_offset) {
		statusb = FLAG_2D
		SetScale(.64, 1.015, 256.0)
		zindex = 20
		z = 0
		do {
			var0 = parent->BlockIndex
			if (var0 == -1) {
				statusb |= FLAG_INVISIBLE
			}
			else {
				x = (x_offset + 17.0) + var0/5 * 62.0
				y = (y_offset - var0%5 * 18.0) - 14.0
				statusb &= ~FLAG_INVISIBLE
			}
			playanim(0, ARROW)
		} while (1)
	}
}

state Card_Blocks_Background_Stance { // 16
	stateflag 0x60001
	statusc 0
	code (x_offset, y_offset) {
		statusb = FLAG_2D
		SetTrans(x_offset, y_offset, 0)
		SetScale(1.276, 2.028, 512.0)
		sleepanim(0, CARD_BLOCKS_BACKGROUND)
	}
}

state Menu_Save_Game { // 17
	stateflag 0x60001
	statusc 0
	code () {
		GAMEFLAGS &= ~(0x1 | 0x2 | 0x10 | 0x40 | 0x80 | 0x200 | 0x800 | 0x1000)
		memcardfn(10)
		GAMEFLAGS |= 0x100000
		Sub_848()
		killobjs()
		CARDICONBUF = getanim(CARD_ICONS)
		spawn(AsciC, AsciC_S_ASCII_TEXT_MASTER)
		CardShowBlocks = false
		BlockIndex = -1
		do (var i = 0) {
			spawn(CardC, S_CARD_BLOCK_ICON, 1, -103.0, 96.0, i >> 8)
		} while ({i+=1.0}; i < 15.0)
		spawn(CardC, S_CARD_BLOCKS_ARROW, 1, -103.0, 96.0)
		spawn(AsciC, AsciC_S_ASCII_TEXT_BIOS, 1, -232.0, -20.0, 71.0, 70.0)
		changestate(Menu_Save_Game_Look_For_Card)
	}
}

state Menu_Save_Game_Look_For_Card { // 18
	stateflag 0x60001
	statusc 0x1000
	code () {
		memcardfn(10)
		BlockIndex = -1
		CardShowBlocks = false
		spawn(CardC, S_CARD_BLOCKS_BACKGROUND, 1, -103.0, 96.0)
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -40.0, TEXT, 49.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // ~c0~sx800~^~sx400~~c1　セーブを　やめます
		spawn(CardC, S_CARD_TEXT_CENTER_FLASH, 1, 0, -80.0, TEXT, 35.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // メモリーカードを　さがしています
		var0 = false
		MenuTime = frametime
		do {
			if (!var0 && frametime - MenuTime >= 10s) {
				memcardfn(10)
				var0 = true
				sendevent(Event12, child)
				spawn(CardC, S_CARD_TEXT_CENTER_FLASH, 1, 0, -80.0, TEXT, 36.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // メモリーカードを　いれてください
			}
			playnull()
		} while (1)
	}
	trans {
		unless (STATUS_FIRSTFRAME) {
			if (buttonpress(PAD_TRIANGLE)) {
				SoundMenuSelect()
				if (GLOBALVAL == 13) {
					changestate(Menu_Return_To_Title)
				}
				else {
					changestate(Menu_Return)
				}
			}
			unless (CARDSTATUS & 0x4) {
				if (CARDSTATUS & 0x8) {
					ClearTextAndTransition(Menu_Save_Game_Check_Formatted)
				}
				else {
					ClearTextAndTransition(Menu_Save_Game_Read_Card)
				}
			}
		}
	}
}

state Menu_Save_Game_Check_Formatted { // 19
	stateflag 0x60001
	statusc 0x1000
	code () {
		BlockIndex = -1
		memcardfn(2)
		spawn(CardC, S_CARD_BLOCKS_BACKGROUND, 1, -103.0, 96.0)
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -40.0, TEXT, 49.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // ~c0~sx800~^~sx400~~c1　セーブを　やめます
		spawn(CardC, S_CARD_TEXT_CENTER_FLASH, 1, 0, -80.0, TEXT, 38.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // フォーマット　チェックちゅう
		MenuTime = frametime
		do {
			if (frametime - MenuTime >= 15s) {
				ClearTextAndTransition(Menu_Save_Game_Ask_Format_Card)
			}
			playnull()
		} while (1)
	}
	trans {
		unless (STATUS_FIRSTFRAME) {
			if (buttonpress(PAD_TRIANGLE)) {
				SoundMenuSelect()
				if (GLOBALVAL == 13) {
					changestate(Menu_Return_To_Title)
				}
				else {
					changestate(Menu_Return)
				}
			}
			if (CARDSTATUS & 0x2 || CARDSTATUS & 0x4 || CARDSTATUS & 0x20) {
				ClearTextAndTransition(Menu_Save_Game_Look_For_Card)
			}
			unless (CARDSTATUS & 0x8) {
				ClearTextAndTransition(Menu_Save_Game_Read_Card)
			}
		}
	}
}

state Menu_Save_Game_Ask_Format_Card { // 20
	stateflag 0x60001
	statusc 0x1000
	code () {
		CardShowBlocks = false
		BlockIndex = -1
		spawn(CardC, S_CARD_TEXT_CENTER_FLASH, 1, 0, 48.0, TEXT, 50.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // カードが　フォーマット　されていません
		spawn(CardC, S_CARD_TEXT, 1, -135.0, 0, TEXT, 51.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // フォーマット　しますか？
		spawn(CardC, S_CARD_TEXT, 1, 89.0, 0, TEXT, 52.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // いいえ
		spawn(CardC, S_CARD_TEXT, 1, 89.0, -16.0, TEXT, 53.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // はい
		spawn(CardC, S_CARD_TEXT, 1, 73.0, 0, TEXT, 54.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // >
		var0 = 0
		InvalidateConfirm()
		do {
			child->y = var0 * -16.0
			if (dirpress(PAD_S) && var0 <= 0) {
				SoundMenuButton()
				var0 += 1
			}
			if (dirpress(PAD_N) && var0 >= 1) {
				SoundMenuButton()
				var0 -= 1
			}
			if (buttonpress(PAD_O) || buttonpress(PAD_X)) {
				SoundMenuSelect()
				if (var0 == 0) {
					ClearTextAndTransition(Menu_Save_Game_Insert_Card)
				}
				else {
					ClearTextAndTransition(Menu_Save_Game_Format_Card)
				}
			}
			playnull()
		} while (1)
	}
	trans {
		if (CARDSTATUS & 0x4 || CARDSTATUS & 0x20) {
			ClearTextAndTransition(Menu_Save_Game_Look_For_Card)
		}
	}
}

state Menu_Save_Game_Insert_Card { // 21
	stateflag 0x60001
	statusc 0x1000
	code () {
		BlockIndex = -1
		CardShowBlocks = false
		spawn(CardC, S_CARD_BLOCKS_BACKGROUND, 1, -103.0, 96.0)
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -40.0, TEXT, 49.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // ~c0~sx800~^~sx400~~c1　セーブを　やめます
		spawn(CardC, S_CARD_TEXT_CENTER_FLASH, 1, 0, -80.0, TEXT, 55.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // べつの　カードを　いれるか、キャンセル　してください
		sleepnull()
	}
	trans {
		unless (STATUS_FIRSTFRAME) {
			if (buttonpress(PAD_TRIANGLE)) {
				SoundMenuSelect()
				if (GLOBALVAL == 13) {
					changestate(Menu_Return_To_Title)
				}
				else {
					changestate(Menu_Return)
				}
			}
			if (CARDSTATUS & 0x4 || CARDSTATUS & 0x20 || CARDSTATUS & 0x2 || !(CARDSTATUS & 0x8)) {
				ClearTextAndTransition(Menu_Save_Game_Look_For_Card)
			}
		}
	}
}

state Menu_Save_Game_Format_Card { // 22
	stateflag 0x60001
	statusc 0x1000
	code () {
		BlockIndex = -1
		spawn(CardC, S_CARD_BLOCKS_BACKGROUND, 1, -103.0, 96.0)
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -80.0, TEXT, 56.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // フォーマット　しています
		playnull(2)
		memcardfn(5)
		while (CARDSTATUS & 0x1) {
			playnull()
		}
		if (CARDSTATUS & 0x2) {
			ClearTextAndTransition(Menu_Save_Game_Save_Error)
		}
		else {
			ClearTextAndTransition(Menu_Save_Game_Look_For_Card)
		}
	}
	trans {
		unless (STATUS_FIRSTFRAME) {
			if (CARDSTATUS & 0x4 || CARDSTATUS & 0x20 || CARDSTATUS & 0x2) {
				ClearTextAndTransition(Menu_Save_Game_Look_For_Card)
			}
		}
	}
}

state Menu_Save_Game_Read_Card { // 23
	stateflag 0x60001
	statusc 0x1000
	code () {
		BlockIndex = -1
		spawn(CardC, S_CARD_BLOCKS_BACKGROUND, 1, -103.0, 96.0)
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -40.0, TEXT, 49.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // ~c0~sx800~^~sx400~~c1　セーブを　やめます
		spawn(CardC, S_CARD_TEXT_CENTER_FLASH, 1, 0, -80.0, TEXT, 40.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // カードの　いちらん　を　よんでいます
		CardShowBlocks = true
		sleepnull()
	}
	trans {
		unless (STATUS_FIRSTFRAME) {
			if (CARDSTATUS & 0x4 || CARDSTATUS & 0x20) {
				CardShowBlocks = true
				ClearTextAndTransition(Menu_Save_Game_Look_For_Card)
			}
			unless (CARDSTATUS & 0x1) {
				ClearTextAndTransition(Menu_Save_Game_Block_Select)
			}
		}
	}
}

state Menu_Save_Game_Block_Select { // 24
	stateflag 0x60001
	statusc 0x1000
	code () {
		BlockIndex = 0
		spawn(CardC, S_CARD_BLOCKS_BACKGROUND, 1, -103.0, 96.0)
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -40.0, TEXT, 49.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // ~c0~sx800~^~sx400~~c1　セーブを　やめます
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -56.0, TEXT, 57.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // ~c0~sx800~*~sx400~~c1／~c0~sx800~+~sx400~~c1　セーブします
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -80.0, TEXT, 58.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // セーブする　ブロックを　えらんでください
		CardShowBlocks = true
		InvalidateConfirm()
		do {
			NavigateMemcardBlocks()
			if (buttonpress(PAD_O) || buttonpress(PAD_X)) {
				SoundMenuSelect()
				var0 = getglobal(offsetof(CARDBLOCKDATA00) + (BlockIndex<<8))
				if (var0 & 0x1) {
					ClearTextAndTransition(Menu_Save_Game_Ask_Overwrite)
				}
				else {
					ClearTextAndTransition(Menu_Save_Game_Save_Block)
				}
			}
			playnull()
		} while (1)
	}
	trans {
		unless (STATUS_FIRSTFRAME) {
			if (buttonpress(PAD_TRIANGLE)) {
				SoundMenuSelect()
				if (GLOBALVAL == 13) {
					changestate(Menu_Return_To_Title)
				}
				else {
					changestate(Menu_Return)
				}
			}
			if (CARDSTATUS & 0x4 || CARDSTATUS & 0x20) {
				CardShowBlocks = false
				ClearTextAndTransition(Menu_Save_Game_Look_For_Card)
			}
		}
	}
}

state Menu_Save_Game_Ask_Overwrite { // 25
	stateflag 0x60001
	statusc 0x1000
	code () {
		spawn(CardC, S_CARD_BLOCKS_BACKGROUND, 1, -103.0, 96.0)
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -40.0, TEXT, 59.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // この　ブロックは　つかわれています
		spawn(CardC, S_CARD_TEXT, 1, -144.0, -64.0, TEXT, 60.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // うわがきしますか？
		spawn(CardC, S_CARD_TEXT, 1, 96.0, -64.0, TEXT, 52.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // いいえ
		spawn(CardC, S_CARD_TEXT, 1, 96.0, -80.0, TEXT, 53.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // はい
		spawn(CardC, S_CARD_TEXT, 1, 80.0, -64.0, TEXT, 54.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // >
		var0 = 0
		InvalidateConfirm()
		do {
			child->y = -64.0 + var0 * -16.0
			if (dirpress(PAD_S) && var0 <= 0) {
				SoundMenuButton()
				var0 += 1
			}
			if (dirpress(PAD_N) && var0 >= 1) {
				SoundMenuButton()
				var0 -= 1
			}
			if (buttonpress(PAD_O) || buttonpress(PAD_X)) {
				SoundMenuSelect()
				if (var0 == 0) {
					ClearTextAndTransition(Menu_Save_Game_Block_Select)
				}
				else {
					ClearTextAndTransition(Menu_Save_Game_Save_Block)
				}
			}
			playnull()
		} while (1)
	}
	trans {
		if (CARDSTATUS & 0x4 || CARDSTATUS & 0x20) {
			ClearTextAndTransition(Menu_Save_Game_Look_For_Card)
		}
	}
}

state Menu_Save_Game_Save_Block { // 26
	stateflag 0x60001
	statusc 0x1000
	code () {
		CardShowBlocks = false
		spawn(CardC, S_CARD_BLOCKS_BACKGROUND, 1, -103.0, 96.0)
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -80.0, TEXT, 61.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true)
		playnull(2)
		GetAdjustedLevelProg()
		if (SAVETYPE == SAVE_TYPE_LEVEL) {
			LEVELCOUNT = misc
		}
		CalcProgress()
		memcardfn(3, BlockIndex)
		SAVEDLEVELCOUNT = LEVELCOUNT
		SAVEDITEMPOOL1 = ITEMPOOL1
		SAVEDITEMPOOL2 = ITEMPOOL2
		while (CARDSTATUS & 0x1) {
			playnull()
		}
		if (CARDSTATUS & 0x2 || CARDSTATUS & 0x8 || CARDSTATUS & 0x4 || CARDSTATUS & 0x20) {
			ClearTextAndTransition(Menu_Save_Game_Save_Error)
		}
		if (GLOBALVAL == 13) {
			ClearTextAndTransition(Menu_Return_To_Title)
		}
		else {
			ClearTextAndTransition(Menu_Return)
		}
	}
}

state Menu_Save_Game_Save_Error { // 27
	stateflag 0x60001
	statusc 0x1000
	code () {
		BlockIndex = -1
		spawn(CardC, S_CARD_BLOCKS_BACKGROUND, 1, -103.0, 96.0)
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -80.0, TEXT, 44.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // セーブエラー　です
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -40.0, TEXT, 49.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // ~c0~sx800~^~sx400~~c1　セーブを　やめます
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -56.0, TEXT, 45.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // ~c0~sx800~*~sx400~~c1／~c0~sx800~+~sx400~~c1　もういちど　おこなって　ください
		sleepnull()
	}
	trans {
		if (buttonpress(PAD_TRIANGLE)) {
			SoundMenuSelect()
			if (GLOBALVAL == 13) {
				changestate(Menu_Return_To_Title)
			}
			else {
				changestate(Menu_Return)
			}
		}
		if (buttonpress(PAD_O) || buttonpress(PAD_X)) {
			SoundMenuSelect()
			ClearTextAndTransition(Menu_Save_Game_Look_For_Card)
		}
	}
}

state Menu_Test_Save { // 28
	stateflag 0x60001
	statusc 0x1000
	code () {
		CARDICONBUF = getanim(CARD_ICONS)
		spawn(AsciC, AsciC_S_ASCII_TEXT_MASTER)
		GAMEFLAGS &= ~(0x1 | 0x2 | 0x10 | 0x40 | 0x80 | 0x200 | 0x800 | 0x1000)
		Sub_848()
		killobjs()
		spawn(CardC, S_SAVE_POINT_TEXT, 1, -177.0, 60.0, SAVETYPE)
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -16.0, TEXT, 62.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // ~c0~sx800~^~sx400~~c1　ブロックかカードを　えらんでください
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -32.0, TEXT, 63.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // ~c0~sx800~*~sx400~~c1／~c0~sx800~+~sx400~~c1　げんざいの　データを　　うわがきします。
		if (DEBUG) {
			spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -48.0, TEXT, 64.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // ~c0~sx800~#~sx400~~c1 UNFORMAT===============
		}
		spawn(CardC, S_CARD_TEXT_CENTER_FLASH, 1, 0, -80.0, TEXT, 65.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // セーブ　オプションを　えらんでください
		sleepnull()
	}
	trans {
		unless (STATUS_FIRSTFRAME) {
			if (buttonpress(PAD_TRIANGLE)) {
				SoundMenuSelect()
				changestate(Menu_Return_To_Block_Select)
			}
			if (buttonpress(PAD_O) || buttonpress(PAD_X)) {
				SoundMenuSelect()
				ClearTextAndTransition(Menu_Save_Point_Overwrite)
			}
			if (DEBUG && buttonpress(PAD_SQUARE)) {
				SoundMenuSelect()
				ClearTextAndTransition(Menu_Unformat_Card)
			}
		}
	}
}

state Menu_Unformat_Card { // 29
	stateflag 0x60001
	statusc 0x1000
	code () {
		memcardfn(10)
		GAMEFLAGS |= 0x100000
		playnull(1s/3)
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, 0, TEXT, 66.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // ~c0~sx800~^~sx400~~c1 ~c0~sx800~#~sx400~~c1 ~c0~sx800~*~sx400~~c1 UNFORMAT
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -16.0, TEXT, 67.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // ~c0~sx800~=~sx400~~c1 ~c0~sx800~+~sx400~~c1 ~c0~sx800~=~sx400~~c1 CANCEL==
		do {
			if (buttonpress(PAD_TRIANGLE) && buttonpress(PAD_SQUARE) && buttonpress(PAD_O)) {
				playnull() // this should be outside the branch!!
				memcardfn(12)
				spawn(CardC, S_CARD_TEXT_CENTER_FLASH, 1, 0, -80.0, TEXT, 68.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // CARD UNFORMATTED
			}
		} while (1)
	}
	trans {
		if (buttonpress(PAD_X)) {
			SoundMenuSelect()
			if (GLOBALVAL == 13) {
				ClearTextAndTransition(Menu_Return_To_Title)
			}
			else {
				ClearTextAndTransition(Menu_Return)
			}
		}
	}
}

state Menu_Save_Point_Overwrite { // 30
	stateflag 0x60001
	statusc 0x1000
	code () {
		memcardfn(10)
		GAMEFLAGS |= 0x100000
		playnull(1s/3)
		spawn(CardC, S_SAVE_POINT_TEXT, 1, -177.0, 60.0, SAVETYPE)
		spawn(CardC, S_CARD_TEXT_CENTER_FLASH, 1, 0, -32.0, TEXT, 61.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true)
		MenuTime = frametime
		while (CARDSTATUS & 0x4) {
			if (frametime - MenuTime >= 15s) {
				ClearTextAndTransition(Menu_Save_Point_Error)
			}
			playnull()
		}
		MenuTime = frametime
		while (CARDSTATUS & 0x8) {
			if (CARDSTATUS & 0x2 || CARDSTATUS & 0x4) {
				ClearTextAndTransition(Menu_Save_Point_Error)
			}
			if (frametime - MenuTime >= 15s) {
				ClearTextAndTransition(Menu_Save_Point_Error)
			}
			playnull()
		}
		memcardfn(2)
		MenuTime = frametime
		while (CARDSTATUS & 0x1) {
			if (CARDSTATUS & 0x2 || CARDSTATUS & 0x4) {
				ClearTextAndTransition(Menu_Save_Point_Error)
			}
			if (frametime - MenuTime >= 30s) {
				ClearTextAndTransition(Menu_Save_Point_Error)
			}
			playnull()
		}
		GetAdjustedLevelProg()
		if (SAVETYPE == SAVE_TYPE_LEVEL) {
			LEVELCOUNT = misc
		}
		CalcProgress()
		memcardfn(6)
		SAVEDLEVELCOUNT = LEVELCOUNT
		SAVEDITEMPOOL1 = ITEMPOOL1
		SAVEDITEMPOOL2 = ITEMPOOL2
		MenuTime = frametime
		while (CARDSTATUS & 0x1) {
			if (CARDSTATUS & 0x2 || CARDSTATUS & 0x4) {
				ClearTextAndTransition(Menu_Save_Point_Error)
			}
			if (frametime - MenuTime >= 15s) {
				ClearTextAndTransition(Menu_Save_Point_Error)
			}
			playnull()
		}
		playnull(1s/6)
		if (CARDSTATUS & 0x2 || CARDSTATUS & 0x8 || CARDSTATUS & 0x4 || CARDSTATUS & 0x20) {
			ClearTextAndTransition(Menu_Save_Point_Error)
		}
		sendevent(Event12, child)
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -32.0, TEXT, 69.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true)
		spawn(CardC, S_CARD_TEXT_CENTER_FLASH, 1, 0, -80.0, TEXT, 70.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true)
		do {
			playnull()
			if (buttonpress(PAD_O) || buttonpress(PAD_X)) {
				SoundMenuSelect()
				if (GLOBALVAL == 13) {
					ClearTextAndTransition(Menu_Return_To_Title)
				}
				else {
					ClearTextAndTransition(Menu_Return)
				}
			}
		} while (1)
	}
}

state Menu_Save_Point_Error { // 31
	stateflag 0x60001
	statusc 0x1000
	code () {
		spawn(CardC, S_SAVE_POINT_TEXT, 1, -192.0, 60.0, SAVETYPE)
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -32.0, TEXT, 69.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true)
		spawn(CardC, S_CARD_TEXT_CENTER_FLASH, 1, 0, -80.0, TEXT, 44.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true)
		sleepnull()
	}
	trans {
		unless (STATUS_FIRSTFRAME) {
			if (buttonpress(PAD_O) || buttonpress(PAD_X)) {
				SoundMenuSelect()
				if (GLOBALVAL == 13) {
					changestate(Menu_Return_To_Title)
				}
				else {
					changestate(Menu_Return_To_Block_Select)
				}
			}
		}
	}
}

inline sub GetLevelPercent() {
	var levelscomplete = LEVELCOUNT - 1
	if (levelscomplete > 28) levelscomplete = 28;
	health = levelscomplete*2
}

sub CalcProgress () {
	GEMCOUNT = 0
	KEYCOUNT = 0
	if (ITEM_HAS_GEM1) GEMCOUNT += 1;
	if (ITEM_HAS_GEM2) GEMCOUNT += 1;
	if (ITEM_HAS_GEM3) GEMCOUNT += 1;
	if (ITEM_HAS_GEM4) GEMCOUNT += 1;
	if (ITEM_HAS_GEM5) GEMCOUNT += 1;
	if (ITEM_HAS_GEM6) GEMCOUNT += 1;
	if (ITEM_HAS_GEM7) GEMCOUNT += 1;
	if (ITEM_HAS_GEM8) GEMCOUNT += 1;
	if (ITEM_HAS_GEM9) GEMCOUNT += 1;
	if (ITEM_HAS_GEM10) GEMCOUNT += 1;
	if (ITEM_HAS_GEM11) GEMCOUNT += 1;
	if (ITEM_HAS_GEM12) GEMCOUNT += 1;
	if (ITEM_HAS_GEM13) GEMCOUNT += 1;
	if (ITEM_HAS_GEM14) GEMCOUNT += 1;
	if (ITEM_HAS_GEM15) GEMCOUNT += 1;
	if (ITEM_HAS_GEM16) GEMCOUNT += 1;
	if (ITEM_HAS_GEM17) GEMCOUNT += 1;
	if (ITEM_HAS_GEM18) GEMCOUNT += 1;
	if (ITEM_HAS_GEM19) GEMCOUNT += 1;
	if (ITEM_HAS_GEM20) GEMCOUNT += 1;
	if (ITEM_HAS_GEM21) GEMCOUNT += 1;
	if (ITEM_HAS_GEM22) GEMCOUNT += 1;
	if (ITEM_HAS_GEM23) GEMCOUNT += 1;
	if (ITEM_HAS_GEM24) GEMCOUNT += 1;
	if (ITEM_HAS_GEM25) GEMCOUNT += 1;
	if (ITEM_HAS_GEM26) GEMCOUNT += 1;
	if (ITEM_HAS_KEY1) KEYCOUNT += 1;
	if (ITEM_HAS_KEY2) KEYCOUNT += 1;
	GetLevelPercent()
	health += GEMCOUNT
	health += 3 * KEYCOUNT
	if (GLOBAL_109) health = 0;
	pathprog = health * 100 / (28*2 + 26*1 + 2*3)
	PERCENTCOMPLETE = pathprog
}

sub GenRandomGame () {
	var gems = rand(1<<26), keys = rand(1<<2)
	ITEMPOOL1 = 0
	ITEMPOOL2 = 0
	if (gems & 1<< 0) ITEMPOOL1 |= 1<<1;
	if (gems & 1<< 1) ITEMPOOL1 |= 1<<2;
	if (gems & 1<< 2) ITEMPOOL1 |= 1<<3;
	if (gems & 1<< 3) ITEMPOOL1 |= 1<<4;
	if (gems & 1<< 4) ITEMPOOL1 |= 1<<5;
	if (gems & 1<< 5) ITEMPOOL1 |= 1<<7;
	if (gems & 1<< 6) ITEMPOOL1 |= 1<<8;
	if (gems & 1<< 7) ITEMPOOL1 |= 1<<9;
	if (gems & 1<< 8) ITEMPOOL1 |= 1<<10;
	if (gems & 1<< 9) ITEMPOOL1 |= 1<<12;
	if (gems & 1<<10) ITEMPOOL1 |= 1<<13;
	if (gems & 1<<11) ITEMPOOL1 |= 1<<15;
	if (gems & 1<<12) ITEMPOOL1 |= 1<<24;
	if (gems & 1<<13) ITEMPOOL1 |= 1<<26;
	if (gems & 1<<14) ITEMPOOL1 |= 1<<19;
	if (gems & 1<<15) ITEMPOOL1 |= 1<<18;
	if (gems & 1<<16) ITEMPOOL1 |= 1<<20;
	if (gems & 1<<17) ITEMPOOL1 |= 1<<21;
	if (gems & 1<<18) ITEMPOOL1 |= 1<<14;
	if (gems & 1<<19) ITEMPOOL1 |= 1<<23;
	if (gems & 1<<20) ITEMPOOL1 |= 1<<25;
	if (gems & 1<<21) ITEMPOOL1 |= 1<<16;
	if (gems & 1<<22) ITEMPOOL1 |= 1<<29;
	if (gems & 1<<23) ITEMPOOL1 |= 1<<27;
	if (gems & 1<<24) ITEMPOOL2 |= 1<<8;
	if (gems & 1<<25) ITEMPOOL2 |= 1<<18;
	
	if (keys & 1<< 0) ITEMPOOL2 |= 1<<10;
	if (keys & 1<< 1) ITEMPOOL2 |= 1<<20;
	
	CURRENTLEVEL = rand(27)
	LEVELCOUNT = CURRENTLEVEL
}

state Menu_Final_Password { // 32
	stateflag 0x60001
	statusc 0
	code () {
		FinalItems1 = ITEMPOOL1
		FinalItems2 = ITEMPOOL2
		FinalCurrentLevel = CURRENTLEVEL
		FinalLevels = LEVELCOUNT
		CURRENTLEVEL = SAVEDLEVELCOUNT
		LEVELCOUNT = SAVEDLEVELCOUNT
		ITEMPOOL1 = SAVEDITEMPOOL1
		ITEMPOOL2 = SAVEDITEMPOOL2
		EncodePassword()
		if (vely) {
			changestate(Menu_Final_Password_Super)
		}
		else {
			changestate(Menu_Final_Password_Normal)
		}
		statusb = FLAG_INVISIBLE
		sleepnull()
	}
}

state Menu_Final_Password_Normal { // 33
	stateflag 0x60001
	statusc 0
	code () {
		statusb = FLAG_INVISIBLE
		GAMEFLAGS &= ~(0x1 | 0x2 | 0x10 | 0x40 | 0x80 | 0x200 | 0x800 | 0x1000)
		Sub_848()
		killobjs()
		CalcProgress()
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, 40.0, TEXT, 71.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true)
		SpawnLevelText(LEVELCOUNT, -16.0, .64, 1.015, 0x1FF, 0x1F4, 0, 0x1FF, 0, 0)
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -32.0, TEXT, 72.0, 45.0, .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true)
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -80.0, TEXT, 73.0, offsetof(var0), .64, 1.015, 0x1FF, 0x1F4, 0, 0x1FF, 0, 0, true)
		spawn(CardC, S_CARD_SPRITE, 1, 0, 8.0, 2.552, 4.055, PASSWORD_BACKGROUND_NORMAL, 0, -30)
		SpawnNormalPassword(-105.0, 16.0)
		sleepnull()
	}
	trans {
		unless (STATUS_FIRSTFRAME) {
			if (buttonpress(PAD_O) || buttonpress(PAD_X)) {
				SoundMenuSelect()
				ITEMPOOL1 = FinalItems1
				ITEMPOOL2 = FinalItems2
				CURRENTLEVEL = FinalCurrentLevel
				LEVELCOUNT = FinalLevels
				changestate(Menu_Return_To_Title)
			}
		}
	}
}

state Menu_Final_Password_Super { // 34
	stateflag 0x60001
	statusc 0
	code () {
		statusb = FLAG_INVISIBLE
		GAMEFLAGS &= ~(0x1 | 0x2 | 0x10 | 0x40 | 0x80 | 0x200 | 0x800 | 0x1000)
		Sub_848()
		killobjs()
		spawn(CardC, S_SUPER_PASSWORD, 1, -160.0, 8.0)
		spawn(CardC, S_GAME_STATS, 1, -214.0, 88.0)
		spawn(CardC, S_CARD_SPRITE, 1, 79.0, 16.0, 2.552, 4.055, PASSWORD_BACKGROUND_SUPER, 0, -30)
		CalcProgress()
		SpawnLevelText(LEVELCOUNT, -32.0, .64, 1.015, 0x1FF, 0x1F4, 0, 0x1FF, 0, 0)
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -48.0, TEXT, 72.0, 45.0, .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true)
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -80.0, TEXT, 73.0, offsetof(var0), .64, 1.015, 0x1FF, 0x1F4, 0, 0x1FF, 0, 0, true)
		SpawnSuperPassword(-32.0, 40.0)
		sleepnull()
	}
	trans => state Menu_Final_Password_Normal
}

state Menu_Save_Point_Password { // 35
	stateflag 0x60001
	statusc 0
	code () {
		EncodePassword()
		SAVEDLEVELCOUNT = LEVELCOUNT
		SAVEDITEMPOOL1 = ITEMPOOL1
		SAVEDITEMPOOL2 = ITEMPOOL2
		if (vely) {
			changestate(Menu_Save_Point_Password_Super)
		}
		else {
			changestate(Menu_Save_Point_Password_Normal)
		}
		statusb = FLAG_INVISIBLE
		sleepnull()
	}
}

state Menu_Save_Point_Password_Normal { // 36
	stateflag 0x60001
	statusc 0
	code () {
		statusb = FLAG_INVISIBLE
		if (SAVETYPE == SAVE_TYPE_GEM) {
			spawn(CardC, S_CARD_TEXT_SPRITE, 1, -190.0, 40.0, FLAVOR_SAVE_POINT, 0)
		}
		else if (SAVETYPE == SAVE_TYPE_KEY) {
			spawn(CardC, S_CARD_TEXT_SPRITE, 1, -190.0, 40.0, FLAVOR_SAVE_POINT, 0)
		}
		else if (SAVETYPE == SAVE_TYPE_LEVEL) {
			spawn(CardC, S_CARD_TEXT_SPRITE, 1, -190.0, 40.0, FLAVOR_SAVE_POINT, 0)
		}
		CalcProgress()
		spawn(CardC, S_CARD_TEXT, 1, 5.0, 56.0, TEXT, 72.0, 45.0, .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true)
		GAMEFLAGS &= ~(0x1 | 0x2 | 0x10 | 0x40 | 0x80 | 0x200 | 0x800 | 0x1000)
		Sub_848()
		killobjs()
		spawn(CardC, S_CARD_TEXT, 1, -105.0, 23.0, TEXT, 74.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true)
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -46.0, TEXT, 75.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true)
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -62.0, TEXT, 76.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true)
		spawn(CardC, S_CARD_SPRITE, 1, 3.0, -8.0, 2.552, 4.055, PASSWORD_BACKGROUND_NORMAL, 0, -30)
		SpawnNormalPassword(-108.0, 0)
		sleepnull()
	}
	trans {
		unless (STATUS_FIRSTFRAME) {
			if (buttonpress(PAD_O) || buttonpress(PAD_X)) {
				SoundMenuSelect()
				if (GLOBALVAL == 13) {
					changestate(Menu_Return_To_Title)
				}
				else {
					changestate(Menu_Return)
				}
			}
			if (buttonpress(PAD_TRIANGLE)) {
				SoundMenuSelect()
				changestate(Menu_Return_To_Block_Select)
			}
		}
	}
}

inline sub MakePadButtonChar(x_pos, y_pos, button) {
	if (button == 0) { // c
		spawn = S_CARD_TEXT
		CardText(x_pos, y_pos, TEXT, 77.0, offsetof(var0), 1.275, 1.015, 0x1FF, 0, 0, 0x100, 0, 0, false)
	}
	else if (button == 1) { // s
		spawn = S_CARD_TEXT
		CardText(x_pos, y_pos, TEXT, 78.0, offsetof(var0), 1.275, 1.015, 0x1FF, 0x100, 0x188, 0x100, 0x80, 0xC4, false)
	}
	else if (button == 2) { // x
		spawn = S_CARD_TEXT
		CardText(x_pos, y_pos, TEXT, 79.0, offsetof(var0), 1.275, 1.015, 0x100, 0x100, 0x1FF, 0x80, 0x80, 0x100, false)
	}
	else if (button == 3) { // t
		spawn = S_CARD_TEXT
		CardText(x_pos, y_pos, TEXT, 80.0, offsetof(var0), 1.275, 1.015, 0x80, 0x1FF, 0x80, 0x40, 0x100, 0x40, false)
	}
}

state Password_Character_Normal { // 37
	stateflag 0x60001
	statusc 0
	code (char_index, button_index, x_pos, y_pos) {
		if (AUTOPASSWORD) {
			AUTOPASSWORDINPUT1 |= button_index << (char_index << 1)
		}
		else {
			var x_final = (char_index << 8)*27 + x_pos, y_final = y_pos
			MakePadButtonChar(x_final, y_final, button_index)
			statusb = FLAG_INVISIBLE
			sleepnull()
		}
	}
	trans => state Card_Text_Stance
}

inline sub SpawnPasswordCharacterDefault(passcode, index, x_offset, y_offset) {
	if (var temp = passcode; temp == 0) { // O
		spawn(CardC, S_PASSWORD_CHAR_NORMAL, 1, index, 0, x_offset, y_offset)
	}
	else if (temp == 1) { // □
		spawn(CardC, S_PASSWORD_CHAR_NORMAL, 1, index, 1, x_offset, y_offset)
	}
	else if (temp == 2) { // X
		spawn(CardC, S_PASSWORD_CHAR_NORMAL, 1, index, 2, x_offset, y_offset)
	}
	else if (temp == 3) { // △
		spawn(CardC, S_PASSWORD_CHAR_NORMAL, 1, index, 3, x_offset, y_offset)
	}
}

sub SpawnNormalPassword (x_offset, y_offset) {
	if (var temp = velz & 0b111; temp == 0) { // OO
		spawn(CardC, S_PASSWORD_CHAR_NORMAL, 1, 0, 0, x_offset, y_offset)
		spawn(CardC, S_PASSWORD_CHAR_NORMAL, 1, 1, 0, x_offset, y_offset)
	}
	else if (temp == 1) { // O□
		spawn(CardC, S_PASSWORD_CHAR_NORMAL, 1, 0, 0, x_offset, y_offset)
		spawn(CardC, S_PASSWORD_CHAR_NORMAL, 1, 1, 1, x_offset, y_offset)
	}
	else if (temp == 2) { // OX
		spawn(CardC, S_PASSWORD_CHAR_NORMAL, 1, 0, 0, x_offset, y_offset)
		spawn(CardC, S_PASSWORD_CHAR_NORMAL, 1, 1, 2, x_offset, y_offset)
	}
	else if (temp == 3) { // □O
		spawn(CardC, S_PASSWORD_CHAR_NORMAL, 1, 0, 1, x_offset, y_offset)
		spawn(CardC, S_PASSWORD_CHAR_NORMAL, 1, 1, 0, x_offset, y_offset)
	}
	else if (temp == 4) { // □□
		spawn(CardC, S_PASSWORD_CHAR_NORMAL, 1, 0, 1, x_offset, y_offset)
		spawn(CardC, S_PASSWORD_CHAR_NORMAL, 1, 1, 1, x_offset, y_offset)
	}
	else if (temp == 5) { // □X
		spawn(CardC, S_PASSWORD_CHAR_NORMAL, 1, 0, 1, x_offset, y_offset)
		spawn(CardC, S_PASSWORD_CHAR_NORMAL, 1, 1, 2, x_offset, y_offset)
	}
	else if (temp == 6) { // XO
		spawn(CardC, S_PASSWORD_CHAR_NORMAL, 1, 0, 2, x_offset, y_offset)
		spawn(CardC, S_PASSWORD_CHAR_NORMAL, 1, 1, 0, x_offset, y_offset)
	}
	else if (temp == 7) { // X□
		spawn(CardC, S_PASSWORD_CHAR_NORMAL, 1, 0, 2, x_offset, y_offset)
		spawn(CardC, S_PASSWORD_CHAR_NORMAL, 1, 1, 1, x_offset, y_offset)
	}
	SpawnPasswordCharacterDefault((velz & 0b11000) >> 3, 2, x_offset, y_offset)
	SpawnPasswordCharacterDefault((velz & 0b1100000) >> 5, 3, x_offset, y_offset)
	SpawnPasswordCharacterDefault((velz & 0b110000000) >> 7, 4, x_offset, y_offset)
	SpawnPasswordCharacterDefault((velz & 0b11000000000) >> 9, 5, x_offset, y_offset)
	SpawnPasswordCharacterDefault((velz & 0b1100000000000) >> 11, 6, x_offset, y_offset)
	SpawnPasswordCharacterDefault((velz & 0b110000000000000) >> 13, 7, x_offset, y_offset)
}

state Menu_Save_Point_Password_Super { // 38
	stateflag 0x60001
	statusc 0
	code () {
		statusb = FLAG_INVISIBLE
		if (SAVETYPE == SAVE_TYPE_GEM) {
			spawn(CardC, S_CARD_TEXT_SPRITE, 1, -210.0, 60.0, FLAVOR_SAVE_POINT, 0)
		}
		else if (SAVETYPE == SAVE_TYPE_KEY) {
			spawn(CardC, S_CARD_TEXT_SPRITE, 1, -210.0, 60.0, FLAVOR_SAVE_POINT, 0)
		}
		else if (SAVETYPE == SAVE_TYPE_LEVEL) {
			spawn(CardC, S_CARD_TEXT_SPRITE, 1, -210.0, 60.0, FLAVOR_SAVE_POINT, 0)
		}
		CalcProgress()
		spawn(CardC, S_CARD_TEXT, 1, 0, 76.0, TEXT, 72.0, 45.0, .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true)
		GAMEFLAGS &= ~(0x1 | 0x2 | 0x10 | 0x40 | 0x80 | 0x200 | 0x800 | 0x1000)
		Sub_848()
		killobjs()
		spawn(CardC, S_SUPER_PASSWORD, 1, -160.0, -24.0)
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -56.0, TEXT, 75.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true)
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -72.0, TEXT, 76.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true)
		spawn(CardC, S_GAME_STATS, 1, -214.0, 56.0)
		SpawnSuperPassword(-32.0, 8.0)
		spawn(CardC, S_CARD_SPRITE, 1, 79.0, -16.0, 2.552, 4.055, PASSWORD_BACKGROUND_SUPER, 0, -30)
		sleepnull()
	}
	trans => state Menu_Save_Point_Password_Normal
}

state Password_Character_Super { // 39
	stateflag 0x60001
	statusc 0
	code (char_index, button_index, x_pos, y_pos) {
		if (AUTOPASSWORD) {
			if (char_index >= 16) {
				AUTOPASSWORDINPUT2 |= button_index << (char_index-16 << 1)
			}
			else {
				AUTOPASSWORDINPUT1 |= button_index << (char_index << 1)
			}
		}
		else {
			var x_final = (char_index%8 * 27 << 8) + x_pos, y_final = (char_index/8 * -16 << 8) + y_pos
			MakePadButtonChar(x_final, y_final, button_index)
		}
	}
	trans => state Card_Text_Stance
}

inline sub SpawnSuperPasswordCharacterDefault(passcode, index, x_offset, y_offset) {
	if (var temp = passcode; temp == 0) { // O
		spawn(CardC, S_PASSWORD_CHAR_SUPER, 1, index, 0, x_offset, y_offset)
	}
	else if (temp == 1) { // □
		spawn(CardC, S_PASSWORD_CHAR_SUPER, 1, index, 1, x_offset, y_offset)
	}
	else if (temp == 2) { // X
		spawn(CardC, S_PASSWORD_CHAR_SUPER, 1, index, 2, x_offset, y_offset)
	}
	else if (temp == 3) { // △
		spawn(CardC, S_PASSWORD_CHAR_SUPER, 1, index, 3, x_offset, y_offset)
	}
}

sub SpawnSuperPassword (x_offset, y_offset) {
	spawn(CardC, S_PASSWORD_CHAR_SUPER, 1, 0, 3, x_offset, y_offset) // △
	spawn(CardC, S_PASSWORD_CHAR_SUPER, 1, 1, 3, x_offset, y_offset) // △
	SpawnSuperPasswordCharacterDefault((velz & 0b11) >> 0, 2, x_offset, y_offset)
	SpawnSuperPasswordCharacterDefault((velz & 0b1100) >> 2, 3, x_offset, y_offset)
	SpawnSuperPasswordCharacterDefault((velz & 0b110000) >> 4, 4, x_offset, y_offset)
	SpawnSuperPasswordCharacterDefault((velz & 0b11000000) >> 6, 5, x_offset, y_offset)
	SpawnSuperPasswordCharacterDefault((velz & 0b1100000000) >> 8, 6, x_offset, y_offset)
	SpawnSuperPasswordCharacterDefault((velz & 0b110000000000) >> 10, 7, x_offset, y_offset)
	SpawnSuperPasswordCharacterDefault((velz & 0b11000000000000) >> 12, 8, x_offset, y_offset)
	SpawnSuperPasswordCharacterDefault((velz & 0b1100000000000000) >> 14, 9, x_offset, y_offset)
	SpawnSuperPasswordCharacterDefault((velz & 0b110000000000000000) >> 16, 10, x_offset, y_offset)
	SpawnSuperPasswordCharacterDefault((velz & 0b11000000000000000000) >> 18, 11, x_offset, y_offset)
	SpawnSuperPasswordCharacterDefault((velz & 0b1100000000000000000000) >> 20, 12, x_offset, y_offset)
	SpawnSuperPasswordCharacterDefault((trotx & 0b11) >> 0, 13, x_offset, y_offset)
	SpawnSuperPasswordCharacterDefault((trotx & 0b1100) >> 2, 14, x_offset, y_offset)
	SpawnSuperPasswordCharacterDefault((trotx & 0b110000) >> 4, 15, x_offset, y_offset)
	SpawnSuperPasswordCharacterDefault((trotx & 0b11000000) >> 6, 16, x_offset, y_offset)
	SpawnSuperPasswordCharacterDefault((trotx & 0b1100000000) >> 8, 17, x_offset, y_offset)
	SpawnSuperPasswordCharacterDefault((trotx & 0b110000000000) >> 10, 18, x_offset, y_offset)
	SpawnSuperPasswordCharacterDefault((trotx & 0b11000000000000) >> 12, 19, x_offset, y_offset)
	SpawnSuperPasswordCharacterDefault((trotx & 0b1100000000000000) >> 14, 20, x_offset, y_offset)
	SpawnSuperPasswordCharacterDefault((trotx & 0b110000000000000000) >> 16, 21, x_offset, y_offset)
	SpawnSuperPasswordCharacterDefault((trotx & 0b11000000000000000000) >> 18, 22, x_offset, y_offset)
	SpawnSuperPasswordCharacterDefault((trotx & 0b1100000000000000000000) >> 20, 23, x_offset, y_offset)
}

state Super_Password_Stance { // 40
	stateflag 0x60001
	statusc 0
	code (x_offset, y_offset) {
		spawn(CardC, S_CARD_TEXT_SPRITE, 1, x_offset, y_offset, FLAVOR_SUPER, 0)
		statusb = FLAG_2D
		SetTrans(x_offset + -32.0, y_offset, 0)
		SetScale(.64, 1.015, 256.0)
		TextDefaultColor()
		do {
			setanim(TEXT)
			playframe(81.0, 2.1s)
		} while (1)
	}
}

state Game_Stats_Master { // 41
	stateflag 0x60001
	statusc 0
	code (x_offset, y_offset) {
		spawn(CardC, S_STATS_LEVELS, 1, x_offset, y_offset, -1)
		spawn(CardC, S_STATS_KEYS, 1, x_offset+208.0, y_offset, -1)
		spawn(CardC, S_STATS_GEMS, 1, x_offset+304.0, y_offset, -1)
		sleepnull()
	}
}

state Stats_Levels { // 42
	stateflag 0x60001
	statusc 0
	code (x_offset, y_offset, levels) {
		if (levels == -1) {
			CalcLevels(LEVELCOUNT, -1)
		}
		statusb = FLAG_2D
		SetTrans(x_offset+80.0, y_offset-8.0, 0)
		SetScale(.64, 1.015, 256.0)
		SetTextColor(0x80, 0x1FF, 0x80, 0x40, 0x100, 0x40)
		if (levels == -1) {
			var0 = entity
		}
		else {
			var0 = levels
		}
		pathlen = var0 / 10
		if (pathlen > 0) {
			spawn(CardC, S_CARD_TEXT, 1, x_offset, y_offset, TEXT, 82.0, offsetof(pathlen), .64, 1.015, 0x80, 0x1FF, 0x80, 0x40, 0x100, 0x40, false)
		}
		groundy = var0 % 10
		spawn(CardC, S_CARD_TEXT, 1, x_offset+16.0, y_offset, TEXT, 82.0, offsetof(groundy), .64, 1.015, 0x80, 0x1FF, 0x80, 0x40, 0x100, 0x40, false)
		spawn(CardC, S_CARD_TEXT_SPRITE, 1, x_offset+60.0, y_offset-32.0, OUT_OF_GREEN, 0)
		spawn(CardC, S_CARD_TEXT, 1, x_offset+32.0, y_offset-16.0, TEXT, 83.0, offsetof(var0), .64, 1.015, 0x80, 0x1FF, 0x80, 0x40, 0x100, 0x40, false)
		do {
			setanim(TEXT)
			playframe(84.0, 2.1s)
		} while (1)
	}
}

state Stats_Keys { // 43
	stateflag 0x60001
	statusc 0
	code (x_offset, y_offset, keys) {
		if (keys == -1) {
			CalcProgress()
		}
		else {
			KEYCOUNT = keys
		}
		var0 = KEYCOUNT
		spawn(CardC, S_CARD_TEXT, 1, x_offset, y_offset, TEXT, 82.0, offsetof(var0), .64, 1.015, 0x1FF, 0x1FF, 0x80, 0x100, 0x100, 0x40, false)
		spawn(CardC, S_CARD_TEXT_SPRITE, 1, x_offset+46.0, y_offset-32.0, OUT_OF_YELLOW, 0)
		spawn(CardC, S_CARD_TEXT, 1, x_offset+16.0, y_offset-16.0, TEXT, 85.0, offsetof(var0), .64, 1.015, 0x1FF, 0x1FF, 0x80, 0x100, 0x100, 0x40, false)
		statusb = FLAG_2D
		SetTrans(x_offset+58.0, y_offset-14.0, 0)
		SetScale(.96, .96, .96)
		zindex = 0
		SetRot(20deg, 0, 0)
		sleepanim(0, KEY)
	}
	trans {
		unless (STATUS_FIRSTFRAME) {
			roty += 10deg
		}
	}
}

state Stats_Gems { // 44
	stateflag 0x60001
	statusc 0
	code (x_offset, y_offset, gems) {
		if (gems == -1) {
			CalcProgress()
		}
		else {
			GEMCOUNT = gems
		}
		pathlen = GEMCOUNT / 10
		if (pathlen > 0) {
			spawn(CardC, S_CARD_TEXT, 1, x_offset, y_offset, TEXT, 82.0, offsetof(pathlen), .64, 1.015, 0x1FF, 0x1FF, 0x1FF, 0x100, 0x100, 0x100, false)
		}
		groundy = GEMCOUNT % 10
		spawn(CardC, S_CARD_TEXT, 1, x_offset+16.0, y_offset, TEXT, 82.0, offsetof(groundy), .64, 1.015, 0x1FF, 0x1FF, 0x1FF, 0x100, 0x100, 0x100, false)
		spawn(CardC, S_CARD_TEXT_SPRITE, 1, x_offset+60.0, y_offset-32.0, OUT_OF_WHITE, 0)
		spawn(CardC, S_CARD_TEXT, 1, x_offset+32.0, y_offset-16.0, TEXT, 86.0, offsetof(var0), .64, 1.015, 0x1FF, 0x1FF, 0x1FF, 0x100, 0x100, 0x100, false)
		statusb = FLAG_2D
		SetTrans(x_offset+96.0, y_offset-20.0, 0)
		SetScale(.96, .96, .96)
		zindex = -200
		SetRot(20deg, 0, 0)
		sleepanim(0, GEM_CLEAR)
	}
	trans {
		unless (STATUS_FIRSTFRAME) {
			roty += 10deg
		}
	}
}

sub PasswordInputMaster () {
	velz = 0
	trotx = 0
	vely = false
	if (!AUTOPASSWORD) {
		Sub_848()
		spawn(CardC, S_PASSWORD_TEXT_INSERT)
		spawn(CardC, S_PASSWORD_TEXT_PASSWORD)
		spawn(CardC, S_PASSWORD_TEXT_SUPER)
		spawn(CardC, S_PASSWORD_BACKGROUND)
		cascadeevent(Event14, self)
	}
	groundvel = 0
	field_60 = 1
	do {
		if (!AUTOPASSWORD) {
			if (dirpress(PAD_W)) {
				SoundMenuButton()
				if (groundvel > 0) {
					groundvel -= 1
					if (groundvel == 1) {
						vely = false
						field_60 = 1
						cascadeevent(Event14, self)
					}
					cascadeevent(Event33, self, groundvel)
				}
				else {
					SoundMenuInvalid()
				}
			}
		}
		density = 99
		if (AUTOPASSWORD) {
			if (groundvel >= 16) {
				density = (AUTOPASSWORDINPUT2 >> (groundvel-16 << 1)) & 0x3
			}
			else {
				density = (AUTOPASSWORDINPUT1 >> (groundvel << 1)) & 0x3
			}
		}
		else {
			if (buttonpress(PAD_O)) {
				SoundMenuButton()
				density = 0
			}
			if (buttonpress(PAD_SQUARE)) {
				SoundMenuButton()
				density = 1
			}
			if (buttonpress(PAD_X)) {
				SoundMenuButton()
				density = 2
			}
			if (buttonpress(PAD_TRIANGLE)) {
				SoundMenuButton()
				density = 3
			}
		}
		if (density != 99) {
			if (groundvel < 13) {
				velz = (velz & ~(0x3 << groundvel*2)) | (density << groundvel*2)
			}
			else {
				trotx = (trotx & ~(0x3 << (groundvel-13)*2)) | (density << (groundvel-13)*2)
			}
			if (groundvel == 1 && (velz & 0xF) == 0xF) {
				vely = true
				field_60 = 2
				if (!AUTOPASSWORD) {
					cascadeevent(Event35, self)
				}
			}
			if (!AUTOPASSWORD) {
				spawn(CardC, S_PASSWORD_INPUT_CHAR, 1, groundvel, density, field_60)
			}
			groundvel += 1
			if ((field_60 == 1 && groundvel == 8) || (field_60 == 2 && groundvel == 24)) {
				if (AUTOPASSWORD) {
					return
				}
				else {
					changestate(Menu_Password_Complete)
				}
			}
		}
		if (!AUTOPASSWORD) {
			playnull()
		}
	} while (1)
}

state Menu_Password { // 45
	stateflag 0x60001
	statusc 0
	code => sub PasswordInputMaster
	trans {
	}
}

inline sub DecodeNormalPassword(hash) {	
	var passcode = 1, mask = 1<<30
	do (var i = 0) {
		passcode = passcode*passcode % 32399
		if ((0b1011 & mask) != 0) {
			passcode = passcode*hash % 32399
		}
		mask >>= 1
	} while ({i+=1.0}; i < 31.0)
	misc = passcode
}

inline sub DecodeSuperPassword(hash) {	
	var passcode = 1, mask = 1<<30
	do (var i = 0) {
		passcode = passcode*passcode % 2021
		if ((0b0101 & mask) != 0) {
			passcode = passcode*hash % 2021
		}
		mask >>= 1
	} while ({i+=1.0}; i < 31.0)
	misc = passcode
}

sub DecodePassword () {
	trotz = false
	if (vely) {
		var gems, keys, passcode1, passcode2, passcode3, passcode4, hash1, hash2, hash3, hash4
		velz = velz >> 4 & 0x3FFFFF
		trotx = trotx & 0x3FFFFF
		passcode1 = velz & 0x7FF
		passcode2 = velz >> 11 & 0x7FF
		passcode3 = trotx & 0x7FF
		passcode4 = trotx >> 11 & 0x7FF
		hash1 = passcode3 ^ passcode4 ^ passcode1
		hash2 = passcode4 ^ passcode1 ^ passcode2
		hash3 = passcode1 ^ passcode2 ^ passcode3
		hash4 = passcode2 ^ passcode3 ^ passcode4
		hash1 = 0x18D ^ hash1
		hash2 = 0x24E ^ hash2
		hash3 = 0x3E4 ^ hash3
		hash4 = 0x139 ^ hash4
		DecodeSuperPassword(hash1) passcode1 = misc
		DecodeSuperPassword(hash2) passcode2 = misc
		DecodeSuperPassword(hash3) passcode3 = misc
		DecodeSuperPassword(hash4) passcode4 = misc
		if (passcode1 > 0x1FF || passcode2 > 0x1FF || passcode3 > 0x1FF || passcode4 > 0x1FF) {
			trotz = true
		}
		PasswordLevels = passcode1 & 0x1F
		PasswordItems1 = 0
		PasswordItems2 = 0
		if (passcode1 & 0x80) PasswordItems1 |= 0x2;
		if (passcode1 & 0x100) PasswordItems1 |= 0x4;
		if (passcode2 & 0x1) PasswordItems1 |= 0x8;
		if (passcode2 & 0x2) PasswordItems1 |= 0x10;
		if (passcode2 & 0x4) PasswordItems1 |= 0x20;
		if (passcode2 & 0x8) PasswordItems1 |= 0x80;
		if (passcode2 & 0x10) PasswordItems1 |= 0x100;
		if (passcode2 & 0x20) PasswordItems1 |= 0x200;
		if (passcode2 & 0x40) PasswordItems1 |= 0x400;
		if (passcode2 & 0x80) PasswordItems1 |= 0x1000;
		if (passcode2 & 0x100) PasswordItems1 |= 0x2000;
		if (passcode3 & 0x1) PasswordItems1 |= 0x8000;
		if (passcode3 & 0x2) PasswordItems1 |= 0x1000000;
		if (passcode3 & 0x4) PasswordItems1 |= 0x4000000;
		if (passcode3 & 0x8) PasswordItems1 |= 0x80000;
		if (passcode3 & 0x10) PasswordItems1 |= 0x40000;
		if (passcode3 & 0x20) PasswordItems1 |= 0x100000;
		if (passcode3 & 0x40) PasswordItems1 |= 0x200000;
		if (passcode3 & 0x80) PasswordItems1 |= 0x4000;
		if (passcode3 & 0x100) PasswordItems1 |= 0x800000;
		if (passcode4 & 0x1) PasswordItems1 |= 0x2000000;
		if (passcode4 & 0x2) PasswordItems1 |= 0x10000;
		if (passcode4 & 0x4) PasswordItems1 |= 0x20000000;
		if (passcode4 & 0x8) PasswordItems1 |= 0x8000000;
		if (passcode4 & 0x10) PasswordItems2 |= 0x100;
		if (passcode4 & 0x20) PasswordItems2 |= 0x40000;
		if (passcode4 > 0x3F) {
			trotz = true
		}
		if (passcode1 & 0x20) PasswordItems2 |= 0x400;
		if (passcode1 & 0x40) PasswordItems2 |= 0x100000;
	}
	else {
		var hash
		velz = velz & 0xFFFF
		if ((0x3 & velz >> 0) == 0 && (0x3 & velz >> 2) == 0) hash = 0;
		else if ((0x3 & velz >> 0) == 0 && (0x3 & velz >> 2) == 1) hash = 1;
		else if ((0x3 & velz >> 0) == 0 && (0x3 & velz >> 2) == 2) hash = 2;
		else if ((0x3 & velz >> 0) == 1 && (0x3 & velz >> 2) == 0) hash = 3;
		else if ((0x3 & velz >> 0) == 1 && (0x3 & velz >> 2) == 1) hash = 4;
		else if ((0x3 & velz >> 0) == 1 && (0x3 & velz >> 2) == 2) hash = 5;
		else if ((0x3 & velz >> 0) == 2 && (0x3 & velz >> 2) == 0) hash = 6;
		else if ((0x3 & velz >> 0) == 2 && (0x3 & velz >> 2) == 1) hash = 7;
		else {
			trotz = true
		}
		hash |= (0x3 & velz >> 4) << 3
		hash |= (0x3 & velz >> 6) << 5
		hash |= (0x3 & velz >> 8) << 7
		hash |= (0x3 & velz >> 10) << 9
		hash |= (0x3 & velz >> 12) << 11
		hash |= (0x3 & velz >> 14) << 13
		hash = 0x18D ^ hash
		DecodeNormalPassword(hash)
		velz = misc
		if (velz > 0x7F) {
			trotz = true
		}
		PasswordLevels = velz & 0x1F
		PasswordItems1 = 0
		PasswordItems2 = 0
		if (velz & 0x20) PasswordItems2 |= 0x400;
		if (velz & 0x40) PasswordItems2 |= 0x100000;
	}
	if (PasswordLevels < 1 || PasswordLevels > 31) {
		trotz = true
	}
}

state Menu_Password_Complete { // 46
	stateflag 0x60001
	statusc 0
	code () {
		DecodePassword()
		changestateif(Menu_Password_Invalid, trotz)
		LEVELSUNLOCKED = PasswordLevels
		LEVELCOUNT = PasswordLevels
		CURRENTLEVEL = PasswordLevels
		ITEMPOOL1 = PasswordItems1
		ITEMPOOL2 = PasswordItems2
		SAVEDLEVELCOUNT = LEVELCOUNT
		SAVEDITEMPOOL1 = ITEMPOOL1
		SAVEDITEMPOOL2 = ITEMPOOL2
		CalcProgress()
		if (vely) {
			SpawnLevelText(PasswordLevels, -32.0, .64, 1.015, 0x1FF, 0x1F4, 0, 0x1FF, 0, 0)
			spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -48.0, TEXT, 72.0, offsetof(pathprog), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true)
			spawn(CardC, S_GAME_STATS, 1, -224.0, -68.0)
		}
		else {
			SpawnLevelText(PasswordLevels, -22.0, .64, 1.015, 0x1FF, 0x1F4, 0, 0x1FF, 0, 0)
			spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -38.0, TEXT, 72.0, offsetof(pathprog), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true)
		}
		sleepnull()
	}
	trans {
		unless (STATUS_FIRSTFRAME) {
			if (buttonpress(PAD_O) || buttonpress(PAD_X)) {
				SoundMenuSelect()
				changestate(Menu_Return_To_Islands)
			}
		}
	}
}

state Menu_Password_Invalid { // 47
	stateflag 0x60001
	statusc 0
	code () {
		MenuTime = frametime
		if (vely) {
			spawn(CardC, S_CARD_TEXT_CENTER_FLASH, 1, 0, -32.0, TEXT, 87.0, offsetof(var0), .64, 1.015, 0x1FF, 0x1F4, 0, 0x1FF, 0, 0, true)
			spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -48.0, TEXT, 73.0, offsetof(var0), .64, 1.015, 0x1FF, 0x1F4, 0, 0x1FF, 0, 0, true)
		}
		else {
			spawn(CardC, S_CARD_TEXT_CENTER_FLASH, 1, 0, -22.0, TEXT, 87.0, offsetof(var0), .64, 1.015, 0x1FF, 0x1F4, 0, 0x1FF, 0, 0, true)
			spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -38.0, TEXT, 73.0, offsetof(var0), .64, 1.015, 0x1FF, 0x1F4, 0, 0x1FF, 0, 0, true)
		}
		sleepnull()
	}
	trans {
		unless (STATUS_FIRSTFRAME) {
			if ((buttonpress(PAD_O) || buttonpress(PAD_X)) && frametime - MenuTime >= 1s) {
				SoundMenuSelect()
				changestate(Menu_Return_To_Title)
			}
		}
	}
}

state Password_Text_Insert_Master { // 48
	stateflag 0x60001
	statusc 0
	code () {
		velx = 0
		#ifreg "ntsc-j"
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, 29.0, TEXT, 88.0, offsetof(var0), .64, 1.015, 0x1FF, 0x1F4, 0, 0x1FF, 0, 0, true)
		#else
		spawn(CardC, S_CARD_TEXT, 1, -112.0, 29.0, TEXT, 87.0, offsetof(var0), .64, 1.015, 0x1FF, 0x1F4, 0, 0x1FF, 0, 0, true)
		#endif
		do {
			if (velx == 1) {
				#ifreg "ntsc-j"
				child->animframe = 88.0
				#else
				child->x = -112.0
				#endif
				child->y = 29.0
			}
			if (velx == 2) {
				#ifreg "ntsc-j"
				child->animframe = 89.0
				#else
				child->x = -176.0
				#endif
				child->y = 46.0
			}
			velx = 0
			playnull()
		} while (1)
	}
	event (e, a) {
		if (e == Event35) {
			velx = 2
		}
		if (e == Event14) {
			velx = 1
		}
	}
}

state Password_Text_Password_Master { // 49
	stateflag 0x60001
	statusc 0
	code () {
		#ifnreg "ntsc-j"
		spawn(CardC, S_CARD_TEXT, 1, -16.0, 29.0, TEXT, 80.0, offsetof(var0), .64, 1.015, 0x1FF, 0x1F4, 0, 0x1FF, 0, 0, true)
		do {
			if (velx == 1) {
				child->x = -16.0
				child->y = 29.0
			}
			if (velx == 2) {
				child->x = 56.0
				child->y = 46.0
			}
			velx = 0
			playnull()
		} while (1)
		#endif
	}
	event => state Password_Text_Insert_Master
}

state Password_Text_Super_Master { // 50
	stateflag 0x60001
	statusc 0
	code () {
		#ifnreg "ntsc-j"
		velx = 0
		SetTrans(-48.0, 30.0, 0)
		SetScale(2.552, 4.055, 1024.0)
		statusb = FLAG_2D | FLAG_INVISIBLE
		do {
			if (velx == 1) {
				statusb |= FLAG_INVISIBLE
			}
			if (velx == 2) {
				statusb &= ~FLAG_INVISIBLE
			}
			velx = 0
			playanim(0, FLAVOR_SUPER)
		}
		#endif
	}
	event => state Password_Text_Insert_Master
}

state Password_Background_Master { // 51
	stateflag 0x60001
	statusc 0
	code () {
		velx = 1
		do {
			if (velx == 1) {
				sendevent(Event12, child)
				spawn(CardC, S_CARD_SPRITE, 1, 0, 0, 2.552, 4.055, PASSWORD_BACKGROUND_NORMAL, 0, -30)
			}
			if (velx == 2) {
				sendevent(Event12, child)
				spawn(CardC, S_CARD_SPRITE, 1, 0, 0, 2.552, 4.055, PASSWORD_BACKGROUND_SUPER, 0, -30)
			}
			velx = 0
			playnull()
		} while (1)
	}
	event => state Password_Text_Insert_Master
}

state Password_Input_Character_Stance { // 52
	stateflag 0x60001
	statusc 0
	code (char_index, button_index, password_type) {
		PasswordCharIndex = char_index
		velx = password_type
		var x_final = (char_index%8 * 27 + -110) << 8, y_final
		if (velx == 1) {
			y_final = (char_index/8 * -16 + 8) << 8
		}
		else {
			y_final = (char_index/8 * -16 + 24) << 8
		}
		MakePadButtonChar(x_final, y_final, button_index)
	}
	event (e, a) {
		if (e == Event35) {
			velx = 2
		}
		if (e == Event14) {
			velx = 1
		}
		if (e == Event33) {
			if (a[0] == PasswordCharIndex) {
				velx = 3
			}
		}
	}
	trans {
		unless (STATUS_FIRSTFRAME) {
			changestateif(Die_Fast1, velx == 3)
			if (velx == 1) {
				y = (PasswordCharIndex/8 * -16 + 8) << 8
				velx = 0
			}
			if (velx == 2) {
				y = (PasswordCharIndex/8 * -16 + 24) << 8
				velx = 0
			}
		}
	}
}

state Save_Point_Text_Master { // 53
	stateflag 0x60001
	statusc 0
	code (x_offset, y_offset, save_type) {
		if (spawn == S_SAVE_POINT_TEXT_INGAME) {
			SetScale(1.0S)
			SetRot(0)
			stateflag &= ~0x60000
		}
		if (save_type == 0 || save_type == 3) {
			spawn(CardC, S_CARD_TEXT_SPRITE, 1, x_offset, y_offset, FLAVOR_SAVE_POINT, 0)
		}
		else if (save_type == 1) {
			spawn(CardC, S_CARD_TEXT_SPRITE, 1, x_offset, y_offset, FLAVOR_SAVE_POINT, 0)
		}
		else if (save_type == 2) {
			spawn(CardC, S_CARD_TEXT_SPRITE, 1, x_offset, y_offset, FLAVOR_SAVE_POINT, 0)
		}
		GetAdjustedLevelProg()
		if (SAVETYPE == SAVE_TYPE_LEVEL) {
			LEVELCOUNT = misc
		}
		CalcProgress()
		spawn(CardC, S_CARD_TEXT, 1, x_offset+272.0, y_offset+16.0, TEXT, 72.0, offsetof(pathprog), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, spawn != S_SAVE_POINT_TEXT_INGAME)
		if (save_type != 3) {
			spawn(CardC, S_GAME_STATS, 1, x_offset + -21.0, y_offset - 4.0)
		}
		sleepnull()
	}
}

state Background_Stance { // 54
	stateflag 0x60001
	statusc 0x5000
	code (x_offset, y_offset) {
		SetTrans(x_offset, y_offset, 0)
		statusb = FLAG_2D
		zindex = -200
		SetScale(.6S)
		SetRot(randi(-25deg, 25deg), randi(-25deg, 25deg), 0)
		playnull()
		playnull()
		sleepanim(0, BACKGROUND)
	}
}

state Text_Sprite_Stance { // 55
	stateflag 0x60001
	statusc 0
	code (x_offset, y_offset, anim, frame) {
		SetTrans(x_offset, y_offset, 0)
		SetScale(2.552, 4.055, 1024.0)
		statusb = FLAG_2D
		setanim(anim)
		sleepframe(frame)
	}
}

sub CardText (x_offset, y_offset, anim, frame, fmt_var, size_x, size_y, r1, g1, b1, r2, g2, b2, backdrop) {
	SetTrans(x_offset, y_offset, 0)
	SetScale(size_x, size_y, 0)
	SetTextColor(r1, g1, b1, r2, g2, b2)
	statusb = FLAG_2D
	setanim(anim, frame)
	if (backdrop) {
		statusb |= FLAG_HAS_SHADOW
	}
	if (spawn == S_CARD_TEXT_CENTER || spawn == S_CARD_TEXT_CENTER_FLASH) {
		statusb |= FLAG_STRING_CENTER
	}
	do (var fmt1) {
		fmt1 = getfield(creator, fmt_var)
		playframe()
	} while (1)
}

state Card_Text_Stance { // 56
	stateflag 0x60001
	statusc 0
	code => sub CardText
	trans {
		unless (STATUS_FIRSTFRAME) {
			if ((frametime - statetime) % 1s > .5s && (spawn == S_CARD_TEXT_FLASH || spawn == S_CARD_TEXT_CENTER_FLASH)) {
				statusb |= FLAG_INVISIBLE
			}
			else {
				statusb &= ~FLAG_INVISIBLE
			}
		}
	}
}

state Card_Sprite_Stance { // 57
	stateflag 0x60001
	statusc 0
	code (x_pos, y_pos, size_x, size_y, anim, frame, zmod) {
		statusb = FLAG_2D
		SetTrans(x_pos, y_pos, 0)
		SetScale(size_x, size_y, 0)
		setanim(anim, frame)
		zindex = zmod
		sleep()
	}
}

state Menu_Save_Point_Test { // 58
	stateflag 0x60001
	statusc 0
	code () {
		GenRandomGame()
		changestate(Menu_Return_To_Save_Point)
	}
}

state Menu_Password_Test { // 59
	stateflag 0x60001
	statusc 0
	code () {
		var items1, items2, level, trials = 0
		spawn(CardC, S_CARD_TEXT_CENTER_FLASH, 1, 0, 80.0, TEXT, 90.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // TESTING PASSWORD SYSTEM
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, 64.0, TEXT, 91.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // THIS WILL TAKE FOREVER
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, 48.0, TEXT, 92.0, offsetof(var0), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // CHECK CONSOLE FOR ERRORS
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, 0, TEXT, 93.0, offsetof(var1), .64, 1.015, 0x1FF, 0x1FF, 0x1FF, 0x100, 0x100, 0x100, true) // %d TRIALS PASSED
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -48.0, TEXT, 94.0, offsetof(pathlen), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // %02d LEVELS
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -64.0, TEXT, 95.0, offsetof(groundy), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // %02d GEMS==
		spawn(CardC, S_CARD_TEXT_CENTER, 1, 0, -80.0, TEXT, 96.0, offsetof(groundtime), .64, 1.015, 0x1FF, 0x190, 0, 0x1FF, 0, 0, true) // %02d KEYS==
		AUTOPASSWORD = true
		do {
			trials += 1
			var1 = trials
			GenRandomGame() // generate random stats
			items1 = ITEMPOOL1
			items2 = ITEMPOOL2
			level = CURRENTLEVEL
			CalcProgress() // calculate stats
			pathlen = CURRENTLEVEL
			groundy = GEMCOUNT
			groundtime = KEYCOUNT
			EncodePassword() // encode stats
			AUTOPASSWORDINPUT1 = 0
			AUTOPASSWORDINPUT2 = 0
			if (vely) {
				SpawnSuperPassword(0, 0) // type in super password
			}
			else {
				SpawnNormalPassword(0, 0) // type in password
			}
			playnull()
			PasswordInputMaster() // password input master code
			DecodePassword() // decode password
			if (level != PasswordLevels) {
				nop()
				nop()
				nop()
				nop()
				sleepnull()
			}
			if (items1 != PasswordItems1) {
				nop()
				nop()
				nop()
				nop()
				sleepnull()
			}
			if (items2 != PasswordItems2) {
				nop()
				nop()
				nop()
				nop()
				sleepnull()
			}
		} while (1)
	}
}

state Die_Fast1 { // 60
	stateflag 0x61000
	statusc 0
	code () {}
}

state Die_Fast2 { // 61
	stateflag 0x64000
	statusc 0
	code () {}
}

state Menu_Return_To_Islands { // 62
	stateflag 0x60000
	statusc 0
	code () {
		GAMEFLAGS = 0xFFFF
		if (LEVEL == LEVEL_Map) {
			GAMEFLAGS |= 0x200000
		}
		GAMESCREEN = 15
		sleepnull()
	}
}

state Menu_Return_To_Title { // 63
	stateflag 0x60000
	statusc 0
	code () {
		GAMEFLAGS = 0xFFFF
		if (LEVEL == LEVEL_Map) {
			GAMEFLAGS |= 0x200000
		}
		GAMESCREEN = 5
		sleepnull()
	}
}

state Menu_Return { // 64
	stateflag 0x60000
	statusc 0
	code () {
		GAMEFLAGS &= ~0x100000
		GLOBALVAL = 0
		changestate(Card_Master_Select_Screen)
		sleepnull()
	}
}

state Menu_Return_To_Save_Point { // 65
	stateflag 0x60000
	statusc 0
	code () {
		cascadeevent(Event12, self)
		GAMEFLAGS &= ~0x100000
		GLOBALVAL = 1
		changestate(Card_Master_Select_Screen)
		sleepnull()
	}
}

state Menu_Return_To_Block_Select { // 66
	stateflag 0x60000
	statusc 0
	code () {
		cascadeevent(Event12, self)
		GAMEFLAGS &= ~0x100000
		GLOBALVAL = 2
		changestate(Card_Master_Select_Screen)
		sleepnull()
	}
}
